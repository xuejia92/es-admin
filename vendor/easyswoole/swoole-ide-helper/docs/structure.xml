<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="v2.8.5">
  <partials/>
  <file path="Http/Request.php" generated-path="Http.Request.html" hash="2a4f15431f2a9a65282d72c855a11932" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\Http" line="8" package="Default">
      <extends/>
      <name>Request</name>
      <full_name>\Swoole\Http\Request</full_name>
      <docblock line="8">
        <description>Http请求对象
Class swoole_http_request</description>
        <long-description></long-description>
        <tag name="package" line="8" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole\Http" line="10" package="Default">
        <name>$get</name>
        <full_name>\Swoole\Http\Request::get</full_name>
        <default></default>
        <docblock line="10">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="11" package="Default">
        <name>$post</name>
        <full_name>\Swoole\Http\Request::post</full_name>
        <default></default>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="12" package="Default">
        <name>$header</name>
        <full_name>\Swoole\Http\Request::header</full_name>
        <default></default>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="13" package="Default">
        <name>$server</name>
        <full_name>\Swoole\Http\Request::server</full_name>
        <default></default>
        <docblock line="13">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="14" package="Default">
        <name>$cookie</name>
        <full_name>\Swoole\Http\Request::cookie</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="15" package="Default">
        <name>$files</name>
        <full_name>\Swoole\Http\Request::files</full_name>
        <default></default>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="17" package="Default">
        <name>$fd</name>
        <full_name>\Swoole\Http\Request::fd</full_name>
        <default></default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="23" package="Default">
        <name>rawContent</name>
        <full_name>\Swoole\Http\Request::rawContent()</full_name>
        <docblock line="23">
          <description>获取非urlencode-form表单的POST原始数据</description>
          <long-description></long-description>
          <tag name="return" line="23" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="10" code="PPC:ERR-50007">No summary for property $get</error>
      <error line="11" code="PPC:ERR-50007">No summary for property $post</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $header</error>
      <error line="13" code="PPC:ERR-50007">No summary for property $server</error>
      <error line="14" code="PPC:ERR-50007">No summary for property $cookie</error>
      <error line="15" code="PPC:ERR-50007">No summary for property $files</error>
      <error line="17" code="PPC:ERR-50007">No summary for property $fd</error>
    </parse_markers>
    <source>eJxd0L1OwzAQB/DdT+GBoURCeYAggdSFDUQ7VqqMc2ksXNv4ox1QF8SGWqYyIAHqBBOlU9UHcghvQWLCkN5i3e9/N5yPT1SuEBJkDEYRCrg3lZLD4MxalaA4ihCOcN2U622xufPrXblZ1dblxBhswvQwrwaGGm4cGFuFMaIhvWzkFuGqlLvijOKDEdikBUqaPcmBpKDbZkBP9o1Kec2gbRnjYBLUtrSBcFBdES4XW//49PPy6jQHQWUKR5nU43L14efL7+f7i/Ne3y/e/PtDsfwq5p//e6carNMCG6uZGDUahzdzglomBdZk2pXCgrCdw5D8/cAMzX4Bq6p9hQ==</source>
  </file>
  <file path="Port.php" generated-path="Port.html" hash="db2a9fad6591791002dfdf8985b314af" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="6" package="Default">
      <extends/>
      <name>swoole_server_port</name>
      <full_name>\swoole_server_port</full_name>
      <docblock line="6">
        <description>Class swoole_server_port</description>
        <long-description></long-description>
        <tag name="package" line="6" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="12" package="Default">
        <name>on</name>
        <full_name>\swoole_server_port::on()</full_name>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="12" description="" type="" variable="$event_name"/>
          <tag name="param" line="12" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="20" package="Default">
        <name>set</name>
        <full_name>\swoole_server_port::set()</full_name>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="20" description="" type="" variable="$setting"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50008">No summary for method on()</error>
      <error line="20" code="PPC:ERR-50008">No summary for method set()</error>
    </parse_markers>
    <source>eJx1jkEKwjAQRfdzill0UYOQCwgKHiRMw6jFdBKSWBeldzcNClLa2fyB9/+fOZ3DIwBopQAVXh2lhOntvWOTOI4cTfAxF6bB7sEJsEytWEbhJVCkARseWbIRGnhFLDlHnWNslq0j+/wadNXbS2zuvaCX9q/kuJE71MAEVWbY+yRxzr3ct68U2P4cq775A2G2Ueg=</source>
  </file>
  <file path="Server.php" generated-path="Server.html" hash="0933162be3448fb837bcbb53d833876f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="10" package="Default">
      <extends/>
      <name>Server</name>
      <full_name>\Swoole\Server</full_name>
      <docblock line="10">
        <description>Class swoole_server</description>
        <long-description>Author: wudi &lt;wudi23@baidu.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="10" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="516" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $after_time_ms in after()</error>
      <error line="516" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $callback_function in after()</error>
      <error line="527" code="PPC:ERR-50015">Argument $host is missing from the Docblock of listen</error>
      <error line="527" code="PPC:ERR-50015">Argument $port is missing from the Docblock of listen</error>
      <error line="527" code="PPC:ERR-50015">Argument $type is missing from the Docblock of listen</error>
      <error line="527" code="PPC:ERR-50008">No summary for method listen()</error>
      <error line="689" code="PPC:ERR-50008">No summary for method defer()</error>
      <error line="698" code="PPC:ERR-50008">No summary for method getClientInfo()</error>
    </parse_markers>
    <source>eJy9PP1TVFeWv/tXvCHWAgkCjUrUxOykNDtDzWRDxaSyVbNTVNv9CF1putnuRpOdyRZGmy9pGhQVEQQUlFX5MBqBbpA/Zvq+7v5p/oU9H/fdd99HN5iZWmIZee/ec88993yfc9/H/zrQN3DsWCLcb6YHwhHTuHQ1mYybHx1re//9Y8b7xoV4OJ020vSwJ22mrpgpeIxvPh3M9CVT54yrg9GY8TH+3XHyt5fDsehgayTZ/wkOuRjOmOeMjvZQZ1t7R1voQ3jWdixCEC8xqL8cM+CH1sKf943STrFy8KC8drO766J8Zr/67ZVwyoglMvL3Nvr/wODleCxiHO8PpzNmqmcgFv3omBem2L8txnLWfE6ML4v7a+WN5fLUMK9SnrvhX+g3vzFE/lnl+r6YX0smLmXCqUxbMvFNMvWdmaLfSrs3xdRkZXJb5O+K0a13wzMR/rY+oryQwq+8d1fktz1rVA7ul3aeiZcPraGnpZ1JF3bWvTcw7fhVetITi1qzm+UHO2JqAp7+begnDyT4oy/YdbEycV08eA2T/tTeYhzHIz/xSdrMZGKJb//UKIEmBvsb/9ysgciE09/5AdSbXR+28YHvNS7RE7S+ot72aml/nrGojuTE1CYckqICbF4M7QFWpZ2cyM/Cr+9ybArMEQ+t6+Lf9ybajRNGk2cbzgb+fCLU/C5rB3IM7EdMPTG+Atq49u895Exq0DSMyvJaeaXACAOSPBRA4PSA2YbRG46nzZrT9D0HEfMyKI3AHeFR8q78O/rqQnfl4KE1uVo5WC8VH4O8AiVFfrNUBPwOyjNrvcmUGY70Va/lxOSwEmop42ND1vwY4YggYKa1vsJSguc/vghCDeLiUmcnPokkE4mEGcnEkomeeCydISYZqoy8hjkAorQ/DE+sB6/F+JLI3xSr+yBFvDwCzV4vv14q7RRE7g6IJC8Mz3ujPpF17ar0dqHyy92BSMoUhduI6PwzsTFWeZyVj6x7S9arO7xl3ATh7j1W/JH0YEazt8O7SRvhtHG8N9rsmvAX12/4o6amzUS0CSa0GA19ZjyebGj+yDX4xyAEzEhf0mjwKFmRfQknYTSALRhMZAKRa241GgxFsv9MNHwUxEThVCr8QyAXaaD8bOQ6YuvhjerQkhjZt+5sKeAD4VS4n7ffl0xngp4PJFPe5yCkoMSTUTPoeToZ+a4n88OA6cK3dzBBWBo9PYByGkQxAgTBNVt4iRaGaJw3Ln3zxRd//Kyn+8svLnx26VKLBtF5eemLC3/oASnhQ+XD/NGvGF6tieGJUuFmqfhGPHhY2brO20d+9glAMsEGAvhavunLZAb013M3UG1OTaDlW7kB4vD3vTnPaSmae+bCRDhekb+XTFzgEwNj+qUZMWNXTMassvG2vL9xGByj+mhBrNxlWKHy05x1dwvxoi2WXxbFw5sI978GTXWYik0lHUbvgSrz2z9p491P+gYz0eTVhOuhZmQDnycHXI+/ivWjt6Q9kQRwPZOkcI+LJ9PuJ6iiXQ/+LZaIpftcj7pjA+bnZjoNDkYAep+lUkk3Np+zL+Lfj3qhNqQL/HHPwTQ1ppjqjS2K15v0M5SvjePyHy2G+216AMTCxNf8r2a/ilLvTnyCKqrh477QJ6ShJKiP2+CBR1v96HEQlMGeX7NmgBm2QMmjE7UxYd1BVf97wKayuW29/An8BpSTvTnmT1S/JDwgH7ossY7rQBj5n0i2/DJh7xngOfBLB8vWtU2xuVt5uYzWbSIrpp6XCsN9Zjhqptq+NTNtA6Ae2iLJ5Hcxs7w+huKZfcXTXLCZKBK4uJ0ThRkF1prZtCauMYw2CTqdCWcG0wARx1u3c2Dyg4kEPrAC32ZvwmDYpb2l6tCtcvG+yL4pFe8yMcDrJN2Sqzy5BobyX8TeHbBc5RdP/M6rVJmgCcEjMo6bV8yEV832x743o6Diw/H45XDE5nyX/ldqFbiNYbQ4E+orR1Y4lYOpyvIE4M2n50HSoyLBf+N9wqZKhUmG4BqjwKFTMHWjurzLcIFpHKsIPuk4/D1ZHZqrHIy4fUNrYbWycVC9t6HW4lUQHkHC1YsBLrykGVlKtOUErS7JYEyTe3h9gjHevE845fKDaTH1gp0tsERtX1/sLj/fFPnHXkmjadboFHgvsGkUqNEHolhwnOAPOsgBQA8S9qWCvw+kBpK/OeNhdD2vM2VmBlOJmo6ns39UeU2H7XlabDyyRrdpa9PVoWt4BLkNz5ooh9FwJkxeKo6C4+KBsCEgjsjlKxsb1vyQWHmKNvTtvcqbLJx9x+cwAwjH7/U3naf+oAGXSxMNgYCVgxlQQejO44JPfrIezrP/JLZ/rjx6Dlqiem/dGr3L08TKy8rrVTWN3HkP/oCiYk//1tAhZDUhsttw2mJyUaxPgTuNq6/MqcMD1wA4HzQjiAfOQeKBt0AKVuKnkZAVBbJDfro8s8gPre1ta+Enfee8O1AnNNUmm6KvigvE1jA/EcOgklZLO68BF+vuCJh8ZNYbb5TAIWq9sbhJ+DwG1EFiGXqg9J8ItXZi3LEzXh4bteZfANLV+SHA6HhvKtkP0aBnFhznkWgJOy9DhAxIzK9d1dhZDGd1MoFdcCg1nCsX87AFJSOV/RcwWIMvw6No6WBBrM8q3u3qBiASX35Fv/RGxa0J3cFVFKesh+2gTU2Wn98UuVe1pMEJzhDNJQ9hNKAwn6wFsnwtQAfZ6nIRyAuA4BwDQM2vgQdY3p9mKpd21nXWALlRvEGqZhilhpgUAFbe3oYIDaI1/dSVDCFuO+vSIaBhpZ1Hkv4AanMPokHwEvDtRBbkDN/uXUfVPjaEHKhhhTCLBZBpXiLUevoPRJ6bCjkAEazBKYhQgaPXTqKWCZzgptPRlaAK9gh0i4IEsUb7obqxVCxaN/JomxxGO9f9xZdf8bZRFGpsFjVmbAAi5q7uK6fE+j3wEUo7P/NRhM52tIY6z7SGWkPtHehu0el0dVP0MYoBsa3LqjP3K5ubOkxkZoBqhE50nj598jSmzvany8V5Nk3ghqjT5icMgdHFQyZd6VXrSv04pwdCurGr+B5TA3dHQDmA0q0MZUuFCWAwMfqGh7n3fKVTJmx4851ifkssDDGo6tCY7UVOVIuzlY0VGBSksMsrhdJbX4KHDqgNzqWrm6HC7I6O9tbQGWDAD1s7Qp2gOKz5Amzj7On2DpsmtHfievamQRvFo+pMHFeDF3DlCTLJpkb3CuD/I2w7ecDAvCkEieSVTscpqsUwtRbtbG8/dzICf53rbT8ZOXc21Nt7rtf88OQ58+yZXkYi5EGihTJgzd4MA4NmvcNODXjh6M0A7xCF0I0ey+npJ59fiEgdBq/zXQFKGvFR1vE+PCoiNuB5QQoiII1RR6eg3mBm/VUaBU4IJjuZDalaiPnPc0LxEN1CLozSKuw9+KOTI1poZ9zp1jNKD/NgFDzgwIOsMjnW+uPyMjrc9nQcMvVEjN6HE8PcoW0LGCvr1Y3q/M8e3NjEs8Pm9tZIwWieWKtnJtdEQE7BaY5gBkBlMUu7iyCl1tI2qr+nEFJNyxwBJzbIdabAa54ncoEC3CFrJ1ueGq4OFStvp1GdQni4f9uawbACAmAJhGNatKYrN2B0zQAj2Dz9QzaIsJVG6MjWh9LH4Rgo+0n8p3V3lzKl8xhvUh4LvT4K06zxOxCpSrO+95O1jplZsFx47KNbTtHCerkkJovW2FPwDDSlJxfg1BcagNlNe234Z3W2KJYfQiwt3mY5UwxOHaYVGP7GBPAAGwXwT9A7ppP3kBaD7ME42i2exjggixZvg6WinbyUcWIvpXxk7iE/LUYKykJa6ys8n5eCaZWD+9WRCbfr7z9Z33bYM1aWsrS/BLgwY6Lpyq4pMlY2twMU2LlzCBJcS89Txr2F2ZTn2Wsrw/bixUmVS5GePdjRjTmYUS7e57PErMPtZzDMOTzy0VB6uy6io5rfxN3bNSiswTD1PPUjdQDRdKZHlXdAgECjtIZCH6D85DcBTd0eV+fyYEMZEx8JmQ1hg1Q4dPADweLAKFiqZKqD0AtQx73xZBgELBPrN5ODgdlo1wa8EsiKvq4M2htocnBoUQuiNLaebvGsAk/t6lXNBLRP9FxyJ2GB4AF50I+2c2wYG1HEwXwLr1wRErFFufi0XJTairPAnFerEZoD/0jmsYXfF7sUqvdXKr/csApTnEmmPPddHg9ubvfvu0V+tjqSd4F2Mc7/F79i+oooI4b2AG8ISmAz8uhi0WaEReU6pRGoGukoivkxqUYAQmEGhtupZGUF4ASsqYLYeWIDDcyPqZoUa1qMwbOPqkOLjoKlQ0cPxtas6PtszgAeMi9wbVys/K/YWFGeoDoQgCk2rmNCTAvWxO6BdQt5BUyYS8eSvgsWOZfmbGrg/zc0i+nxyuaYzliKXGL7ZwbLC5VvvPE4aAwDlSE57bWK6p+mf0hEqLBKVJKK5RR7HuLRQzG+pGmWHKfKMmo8viNHBrPVYzfF9ionAz1cASSSSTZPidDWTHIsRy/AwADOo5kx20gHzEQDhmLt71nJOP+J0XlKsRev2nlKZYAAE/SIZt7owu4mi2KdV2sgU+C6VJd3/YQLMCo9RBfyqoHl2RoxObgwAubGzcXKbfM619S9ERDrkR9BjhtS6gUqCF5PbAGik3IZUjjA46LwRFlIFnMI9YC4nIfgYXjm4w9gGHkQsCTY1uJyee825mYmCjifPEm3dsN0GBtir+ID+aKKMBO5jtZzm5VaSYO6RuNQtw331GS79odaBp9psHW9VJp2MsElj+Q4ORItY6A3o9a1TZTM+bXqwkOVCwMG0Lt6KDG0yRoAbQtVe3iu6l/QPGmtbsb+dIAd6ZfvdwpOOoAA6kmBmtYBppUfbFhLI+4GEU3r/4/RpMnaB4ZX+k4YIW+/CwRBUlYg7JL4M9Ny8TdgY3r1KiiDQOoSjjBhXnUXQJoa2lvpvwYOrz1BvVPI4LJCk+st/ujdPahKOlr8Q7wdPgHjmoMXxiLkgLNZvRBJI7CSnoo45yHj0oBCo+xmeO8vErKa8qMhWcDAOMV4zw3wHAPUmhgY2o+18cXdaogaClNpdZ2IyMbWj+yVcKonOtg/0FR70pHxYbsWiJEeniksjgo3xZlkF2AXbxlBy9Q5oViv0QRebX+THHH+PLNOY7NvqH+yhhwpsYYw2mkSNyOS7Adf2Zuwou352SSuFegPWU5XjiGQZC9r+dfTsNSEu0mmtAjZgVQyAo9BHh34h2L+oy8D5lqKq2K+Nhx3yqjf3WHwzzMq+k7tVQ41L/gjF8A0y0e1ohHb5Ehv1eMsVofmyouruv1BX9UdM+iOoceC2QVxjNjZHoDbr0OrQ3TbNbWL7Q0++gdG2a5cQLBnpDtEqn9Bw/wZx7dADocWsFvp69jRgAeZQDQ8zjA7Rvr+0cHNvhIH12slOVTejo22wtJelmpSDl4yVNxZ56PXiwiYj5mawBI9QerV22RqcLQ39A5mT3lQzuhD4t/HQ9YvN1Vow8VyldATu2+ssbdipABchXU9chzLhScQPUI4U733WvUwauko6XBOjMCoWG8P5c56nC44BDt6vzLyDFsMKInKySAdlDX/jOeXilkOI7WGRe4vaAzwfgJW40JG4Dp6xgSFUg9d+Xi5I2BrmFFQZWII6hkH3Ar1VeIqIHe0CqVlo3pNwobny6wGn7fMbPv34lVVNXsOFTP0maAqL5vhTFMQPNBSVG6oyyDcPq7I72ruscc4IHtiid6kEli90Mwdqiw9rsJpYNhOP9z64XfSjEY5lVyvdr+LJgf08oBQgBNnNEqcezCBxMNOnu04c/Z0qONs0PB4OB0w9uSHNRfHugKNpTJPwKiU2Z/MmM64U2fOhs7UGRgboGGNoY4PyccNNXp8zgCBGIwOwKnHzAQmyKQm9xyWO6utmeb3NbfNgeMaYKfCMQMC8kwJJOzyzSRT5cKB3qFt15zgTFyjpWuF/aNmxpDJ4J0cypO7sqK3KmvgkHougGxbXG0++EcjtuGHXGt4bCBgcEzvntS5SLZOQwwnkYDYi5QkqoncndJ+rvz0ljZXsZSBbTdTk1g6ebGsV9HqQQhybN6p6MHS9dcjFD/qMcwRUqyoSRdWuROd269lot7ugvfQGDarLUmd7pSzRqZYLKBblH1ZKjzHWHZ9Vva+g+FenwXr2/XFN+EYdjGqxnfOg4i3o+LgORr9/BOxctcDX5UfVK+YwqQyRJ0txSz8QQQIf91ngCXUeM/RcAnc325JP8fJjUV5OG+0ux3iq32xuNnkqGb7eUBHPG6EthAo3/iiSS3UYoTaA1zvWG+TA+b8+fN8mSKZMmRLvHqHIYwqeh0eT3CEyu6IL+C0fy6DuvjuKIGMTi5qCHHQ8k93FFe9UepGgkPEoHsItXeohT7yNsLlVDIcjYBcHx6dee8ouBr05V6D3g1AuJGO/bcT2PwD4uzmDxLlFmcFDAPbD6lx8gUmFps6kQSoNpHfKu9eEwf3qe90EqRduQZYrgI1R9lnmZWkjKHTCENJMzE9y+1x38XicZl+u7sr9vKgXcrFUWv9UZtER12hW7spCnlO12OikzKZYnROrO6Xio/LS9fYw+cea5EbZyigJdASYev+9awY/qW0g1m4UuGp6gHkewZ8+YYDiVJhxZq9XX5VLBcXwd/ntuZScZZL2jT+Jur3jV8oCJmuvKbWxGsjEAVRo7czWN7a4+a5R88Zp1IB692qrk/O6TbPglcATexcYw8LXfafl7EHUq0yNQk0rC48FDs7pZ1VoJG/EsDXKa38VOntAwBoLc7gXSSdqGiL5gtilHoV7fOA6Eym/6emGQSrdpl8HNsFF56dRu5rUobRXywTG2MiuyaDrYXFwGLFpa7fffXZl5+fo8YulVRlg7m+wqs4/TpbwxImbUMDAwTv/n03cwDnYGF9VyEmLa9VNDXL2s36iqsLXSLz9aUvQ4SMntVlfORbtXPEZvdVee2VmN+CGJouQNaSmqPhmDLjoGzqYchBMJCUh8JipYMFa3xFnSNWqMjpkAPWH8OyXMviapVMSVMWn9mAN4TyQK2FQZbtvUOUAo9CITZOII3qXaYFq8vQ3EUiriGROUcGhBPwtGkx+Tu4cOnnpfdccN3YKcQ6ghAz4BSt4rS8uJl/JjZ33bdaR++qrlSM8efXvnElGNZjiUh8MGq24V2FWApPB86Zu4CBXNadUSUmsgt/LCe2XnL8XWeuvNRwfZ9VpI4l/A0nKMaXKvuq7AZogyOlxLGazWGrTe6VliFvphorBmqqs59TNqoFluNdW+lS26nt2cnWsaClbQ1BBVRuPuPq+3AWGyHt9jPuh5bNi1RMqhzMs79lTT7FCvY0KPEVRGay6Oc4r3U9anbPlqq6Vk+2r9foofZk3TDw9/VPI+v6dJhUb6XdRVslPixPbnkW8zMzM2zodCC7Hj2tqVRe3a17DIUnzxaORv8IPoWZAB5YWOXyMZ+xirKoCWwO26Lduo35Vrbmu6F6AhAM9ygpYS1Oqb59jgExOKAwMPCex/v23US8DOK5pmhkIgNGbODKKRmLBs3p9E7qtGd11pr19UX3SvC7AcF03ZWwEdM7qdOeVXulf+/6j56Lv/vy08+NwUTsezukjn4LnmPw4EtfffmZZ3Q6Ay5xv5tsiulZFLe3xdQo53pxc0AFcjHoRhGdNMuxuDXB3ebq1A8Lh0jxAAPFJQM1NahMR4Pdseu9WxpYzXHD0Dq1ZVXw5K+B46ornnJDADocAUIbRCVtqcFEW/8P+LYVSQ7g2lsCDuWw4kbATeBaLbT03HfZ1yv9OqaeO7+/5lqveHsP/AY92Ee1/Ro7RlWwzD3ksi3EznKEI5EBM9NGmUqcMlTkLgcwpYGZR/oJzhM2clzj5OxOtZ89czLUeeqUN8nWqCkYu6DrS9k1AmrmQKaHouIaQ+wEqz3Ck5r0V7XeNxwkDc/1O5X80Ua7EZXfdFCZKW6d0YbrKBt8Ixl0tliZE1vTSnPq4B38DZXMVqflho2OE/Cihge7j9bkreqs017lT+3Wzl7r994y6cNsMCxFJQJFJ4xzOJ4LahzwWqreDDghfCWUvqOA12/IF4bAh8sbnLSWIMnJRodk6yU4v9WZIWvzmt8UHyewdJw9/WmDEfSk8LAbbvO5lgpUt0F7FAHkhsD1nl+kbQ2pWpS6Hy97KKimpWIDrmzZAO36k7zZDidS2r/jyrf7MPZdADTOdJ5qxx/NvVH5OElUnJ3q0UiKeI4+F1O5YDV2vD8dpKVcqHgGeG7aKlIFD6Nf6is8XKvJvWRLAPwWCQy7TQbj8UCeVCyp+zu2H6tpVi9VFDkC1HmQKtfV+NEdO179n6DVFQNsg2AvschwIgKz7xtzpV1K5tb5vAvefuJ+APBVC5J55BPnPji33dmVVmZ8UpPcUOUSZGU+MIXLJUW6uquq41TBRAhKWYj1Kel0u0q3eH401TXEG3bDioQnO8B8hRrIwALB+SpPfq3N473S3fa0vqo7OPAG+5I8akG7f3tSIckBO/jPYCE1uCoMgTdiZ0d2FNAW5dmN7Vob454jU3cSgI0hzvob3rsat8ZXudGN70aqiazi/WpQoYY9umOz5Q1sp3bdlXZuNFIvIablpvf5phu86teHorrlMFLDvYZ75OIoxWyHeT7dPKypxvSjXNJXFgOIQZ35HbKDFs3iitLD3IeMpoua8sBQitF71tqy2AOGR6LwXFT52oCu7gtyjB0Zsv+tFvVQo/ziRakwoe4oUDFNjsRY/97r6txMLaOkvq2iT0GrsJWvPrpX/vkWQAupofztBr68qpPAHwIDR3m4PDDDx2sjFU5jHhSoRysgkxKe+JGwp7fILOOFVm2gJ1UBGwphGeinx7Kl+TTertaqzyHNpPkXpi9rAGuQZZPZjhpfWWsL+GBMm7yyhBkgdyeI51ad6gBGSRl/IEYKLASo6nbflHZmFFWxrfbOqC7ftp7EzDYVv/AjBXyzSD9jKrC5GYVkNPcKUIBZThy+Mofuj6bddT+IeO8Zojk/FiLNv+jg4z1ItoRqukN6X1s00df94R8miEwT2f3ErOiRLG5mq/JtN/8HUDCRSR+fYz4czsrGnZFnaE6uxjKRPmSjpV0rtwHeB6wWjsuPry2silHwcdbxzqw7raDzeFAk0tZmVBce4SVyshLVx5PW0l6NyJBYqwnZsPkjmBhK1x3XwaM62pVnFORB2Rt5ZydBraNAHOJ9jy5V76/UUkC2v+JBJ3jpqBl/t6WJtzIxcG9rLC/tp+2U1Got8/qvCLKW4+qq+FKBgr+jwoqCE48enmR3hCMFDzTmfpYxR1RvLbrkbWeSHWr7met6n757lElQkcV1bhRXF/xcuTTeYiRuhlPWThbOjvJwk24HPhqtuYjMSJKeYRGsr2nq3848zL0/3KtXrF3jc4TOHQDYhcNabi//KM69h+WxXsdupB4jrq/ox8TfweDT8IlE1IWtdsMUTuZTDkpi0aO4HCqvcmjPPPoDrM9tf0BVhvgyGWurOu4DwSZvN1d+utViQIwIDoEYvo+x5Z28dWORWuG2S/u3+YoBTK0MXXd9hUr/qhmjNKbUs74GXmJTpsD+doHeOun03k0cAEKOYNOlLXuFvnAiGjdTYInb0mbGYLdZfS/Ve7kIDTmmUgIuQAapZQm8qVF6BI0tRmP/Dz32b8HZwIBJfAvheKYvlvZAODIImEUfvz13zre61zvWP2TVg5/SDRYzfl870j6qTbGR1RZsqQn9ENnjGi9VukCz4feK6l68l9/PkZ+nokP94pIKoezP63C5nl/zDWZ5t4qe86dvKptFrDTwyrtv+NM9nC1HV9leKP8MP7GG7VvUlWTd3K68XqCC/IHeJyxLHfdhlUn700dPqyN5Wf+798aFwNyNC91fYyKdYIrcEt8T8uz1OCKAxDVcHwEhiJXtTfH2hnMJjB6qZqnADy69w4cB1AwnwvF+shEJBOaQunBrfplHNzrqbOzvmCgPzMn20S7e8fq/zfyKWAylXFxA5UdkemcGt3G1O+Ik6ENYGduJKWFbnEb/REujqBwK3bqSXgzp+mgsPRAGj7UHP8B5/rSMObd/Bsp3XQSXlVMAfWHsoy8AGDE6XM3mqD5OscbBQmXzGpXLcLWvuy6qvK7Igruyxt8hgimYtbc/iFXnC2Z4r41apwGOG7cO27fBaJa5gPyTsXL2qSwy9UbJw8blVG4Z76ZhF45kBHa39J7yB/jt2t4ofxgZ2yiIFYh5OFKRrAVuu9jDbkrOGag+vt6o8x2vGTBPswAcAgRraVuGCTYA5wM6lOnFj5Upyow+h7ffeHFjGb8cS0Tl9yy2Xkq7Rbv2na28LKyOiAIxwLtcOACkAWPy4NC5GqTvQesVE/5mlEJKfTBbPyu/ZKCSiBpOnYC1TT5fOdgCq6qNGsRmXpKzr32tGL4PpaEpBUxo45Q5d5I61K0gGbwwPMgfKBnOwRjWtjQnUPvowXHthuVmw1pcLc/flHQZG+K1Bu3vZ7+LZqCng7/iIhBuQor+4GEuG8eZnlK4yG9zIZtduUskHvRNDOe6ActMmv00rzPpyhFLtFNmOjmYitQv931rZni1JoKhf8ukpveLEXFvFLSlKMw4ZSG+XkHm5BBq1yKrQsr8ntoRe6OHoCLhowsRvhw3j/j5zajZC76If9LRFquzGeOv9UpZQOkL1DjfZbOue70fj/0fVJHWwA==</source>
  </file>
  <file path="Atomic.php" generated-path="Atomic.html" hash="637b224f5761d2fdb2d6f617c1e2e2cf" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="13" package="Default">
      <extends/>
      <name>Atomic</name>
      <full_name>\Swoole\Atomic</full_name>
      <docblock line="13">
        <description>Class swoole_atomic</description>
        <long-description>woole_atomic是swoole扩展提供的原子计数操作类，可以方便整数的无锁原子增减。
swoole_atomic使用共享内存，可以在不同的进程之间操作计数
swoole_atomic基于gcc提供的CPU原子指令，无需加锁
swoole_atomic在服务器程序中必须在swoole_server-&gt;start前创建才能在Worker进程中使用</long-description>
        <tag name="package" line="13" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="18" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Atomic::__construct()</full_name>
        <docblock line="18">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="18" description="" type="integer" variable="$init_value">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$init_value</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="28" package="Default">
        <name>add</name>
        <full_name>\Swoole\Atomic::add()</full_name>
        <docblock line="28">
          <description>增加计数</description>
          <long-description></long-description>
          <tag name="param" line="28" description="" type="" variable="$add_value"/>
          <tag name="return" line="28" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$add_value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="38" package="Default">
        <name>sub</name>
        <full_name>\Swoole\Atomic::sub()</full_name>
        <docblock line="38">
          <description>减少计数</description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="" variable="$sub_value"/>
          <tag name="return" line="38" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sub_value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="46" package="Default">
        <name>get</name>
        <full_name>\Swoole\Atomic::get()</full_name>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="55" package="Default">
        <name>set</name>
        <full_name>\Swoole\Atomic::set()</full_name>
        <docblock line="55">
          <description>将当前值设置为指定的数字</description>
          <long-description></long-description>
          <tag name="param" line="55" description="" type="" variable="$value"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="65" package="Default">
        <name>cmpset</name>
        <full_name>\Swoole\Atomic::cmpset()</full_name>
        <docblock line="65">
          <description>如果当前数值等于参数1，则将当前数值设置为参数2</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="integer" variable="$cmp_value">
            <type>integer</type>
          </tag>
          <tag name="param" line="65" description="" type="integer" variable="$set_value">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$cmp_value</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$set_value</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="18" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="46" code="PPC:ERR-50008">No summary for method get()</error>
    </parse_markers>
    <source>eJydk91uEkEUx+/3KeaCCyQaorcarekLmBjjJdlu17oRdjf7US9ME0QphQKLaSlt2bTFqMGYpZA0kS5fD+OcWbjyFZzdoRRoLdW52eycc/7/35w58+iJ+lrlOJlPiLrKCyJ6/lZR4uJDjotGIhyKoOU4r+tID3ZjvKEkJIFu+5HpLbJ/ylJI9ju0ysQq4X7VO/wIxWNwSsNGjZSbZKeAe7bX6vzu5sE6xZ2vZO8c9wekfEajNJlUTka771kJfD6CjPUrmfKdZtxxb+Dt1iHdwu4P2EyDsz/RA7uO2wUo5anYcFD16tv4fHtUOWPOjOKKHhy72C2uCcIEevnZCwZB8hnc+ULlfTI7CTmf76qAXSd2AXI1OKhTS3At3HZgkB7VOjQ0TtVFbV3U7j3WDV4zIFuArSp0XJItDD/0aNZLRXsjamPmtsPOSJ2inBD0/ylr/DsO0RXcjL8iaEnlNT6BJNlAIUmWjNg6HzfFcTQafFVzJS4J6JUpC4akyCgWExRZNzRTMMJTNXeCZGawwc37+NeRO7noYLA3hxDiV1dn3NGSJhqmJvtwNwLRwvBl9QKOjAXNTzdy6ObK/3HQwvBl9bUcF5LD4k+w9qC3Q2+Swfiznuz+q+WaaIQXHLi5yWyo+rDR93oN3HbpXELj0H8x5SY4lb80YvEo6NQ+dJuuf0uRI5tx+JbJrudk6aMBK0V/7/vvb+tgQsoyJrAs6cH1kMHgCgl17samgpTxFkNNJYLDTKTuTlXOHm7jD8NqCTM=</source>
  </file>
  <file path="Http/Response.php" generated-path="Http.Response.html" hash="6decfaef86be825223e7ec56974e7f33" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\Http" line="7" package="Default">
      <extends/>
      <name>Response</name>
      <full_name>\Swoole\Http\Response</full_name>
      <docblock line="7">
        <description>Http响应对象
Class swoole_http_response</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="13" package="Default">
        <name>end</name>
        <full_name>\Swoole\Http\Response::end()</full_name>
        <docblock line="13">
          <description>结束Http响应，发送HTML内容</description>
          <long-description></long-description>
          <tag name="param" line="13" description="" type="string" variable="$html">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$html</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="21" package="Default">
        <name>write</name>
        <full_name>\Swoole\Http\Response::write()</full_name>
        <docblock line="21">
          <description>启用Http-Chunk分段向浏览器发送数据</description>
          <long-description></long-description>
          <tag name="param" line="21" description="" type="" variable="$html"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="30" package="Default">
        <name>header</name>
        <full_name>\Swoole\Http\Response::header()</full_name>
        <docblock line="30">
          <description>设置Http头信息</description>
          <long-description></long-description>
          <tag name="param" line="30" description="" type="" variable="$key"/>
          <tag name="param" line="30" description="" type="" variable="$value"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="45" package="Default">
        <name>cookie</name>
        <full_name>\Swoole\Http\Response::cookie()</full_name>
        <docblock line="45">
          <description>设置Cookie</description>
          <long-description></long-description>
          <tag name="param" line="45" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="45" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="45" description="" type="integer" variable="$expire">
            <type>integer</type>
          </tag>
          <tag name="param" line="45" description="" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="45" description="" type="string" variable="$domain">
            <type>string</type>
          </tag>
          <tag name="param" line="45" description="" type="boolean" variable="$secure">
            <type>boolean</type>
          </tag>
          <tag name="param" line="45" description="" type="boolean" variable="$httponly">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$expire</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default>'/'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$domain</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$secure</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$httponly</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="53" package="Default">
        <name>status</name>
        <full_name>\Swoole\Http\Response::status()</full_name>
        <docblock line="53">
          <description>设置HttpCode，如404, 501, 200</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="" variable="$code"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="62" package="Default">
        <name>gzip</name>
        <full_name>\Swoole\Http\Response::gzip()</full_name>
        <docblock line="62">
          <description>设置Http压缩格式</description>
          <long-description></long-description>
          <tag name="param" line="62" description="" type="integer" variable="$level">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$level</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="71" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Http\Response::sendfile()</full_name>
        <docblock line="71">
          <description>发送静态文件</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$level">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyNVM9PFDEUvs9f0cMmu26G7GDwpESTvXDQi3o0IWW2yzTbbSfTDoiGRExEEsGFgCQciJIYflxmNRETZNV/hs4uJ/8F2w5VGdxZ5jCTvu/r+772vTd37oZB6FDYRjyEPgKP5hkj6MmUEOFtp1atOqAK9EJurslvW7J7Mvi8p2N1AjkH3LCnA0WYjlQGRjlSaM3xDfzQhp47QD0mnX6qoH+6me6+/5v4V29VdjbOXyxNPX5wXy6/ksmJpd4LYQTbgIsI01lQCkSbXEA18w3jGYJ90IypLzCjANFGxbDAJCiXbxhOpr/o5G3I9W5/61DbGKsHMW3JleU0OZbrG+lxZ3CwIncOM1fpu0/pWpJzNNrKfIQFyswU+xgkP/rfE3MdH7+c/dxLl7p5sRZayIfmIIlRoYEAwQaKKnqze8G/jpE6Yy1sMw+pw1U/FvnXlsUwFaCEnoY4yiN2VwhFMARqsDbENAfOqM4DJY78+ErKDNJNyShZKLwg35z00gW51qjqH8/NjOlWqpVda8V0lmvV1aoJCdcbraYNXbfqddZAegT2X054Ey645Y274Kbn5QvuK1rhcbiAIuYVQ7Tao1vu7Zt+7yj90JO9zv/KRtAcutznf/Rmn+GwkhHUkcdHSGazdL67k6qJ2n59dvp1SMELFLka7yYmqmT6rf9bOdHF35XriFM=</source>
  </file>
  <file path="Websocket/Server.php" generated-path="Websocket.Server.html" hash="d2ea4168b6a6c14578b308586a2852f1" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\WebSocket" line="8" package="Default">
      <extends>\Swoole\Http\Server</extends>
      <name>Server</name>
      <full_name>\Swoole\WebSocket\Server</full_name>
      <docblock line="8">
        <description>Class swoole_http_server</description>
        <long-description>内置 Websocket 服务器</long-description>
        <tag name="package" line="8" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Http\Server" refers="\Swoole\Http\Server" link="/classes/Swoole.Http.Server.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="17" package="Default">
        <name>push</name>
        <full_name>\Swoole\WebSocket\Server::push()</full_name>
        <docblock line="17">
          <description>向某个WebSocket客户端连接推送数据</description>
          <long-description></long-description>
          <tag name="param" line="17" description="" type="" variable="$fd"/>
          <tag name="param" line="17" description="" type="" variable="$data"/>
          <tag name="param" line="17" description="" type="boolean" variable="$binary_data">
            <type>boolean</type>
          </tag>
          <tag name="param" line="17" description="" type="boolean" variable="$finish">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$binary_data</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole\WebSocket" line="28" package="Default">
        <name>pack</name>
        <full_name>\Swoole\WebSocket\Server::pack()</full_name>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="28" description="" type="" variable="$data"/>
          <tag name="param" line="28" description="" type="" variable="$opcode"/>
          <tag name="param" line="28" description="" type="boolean" variable="$finish">
            <type>boolean</type>
          </tag>
          <tag name="param" line="28" description="" type="boolean" variable="$mask">
            <type>boolean</type>
          </tag>
          <tag name="return" line="28" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$opcode</name>
          <default>WEBSOCKET_OPCODE_TEXT</default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mask</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="16" package="Default">
        <name>setGlobal</name>
        <full_name>\Swoole\Http\Server::setGlobal()</full_name>
        <docblock line="16">
          <description>启用数据合并，HTTP请求数据到PHP的GET/POST/COOKIE全局数组</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="" variable="$flag"/>
          <tag name="param" line="16" description="" type="integer" variable="$request_flag">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$request_flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Http\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\WebSocket" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="28" code="PPC:ERR-50008">No summary for method pack()</error>
    </parse_markers>
    <source>eJyFkM1Kw0AUhffzFHfRRQ2BPoCKYg0ILiqkUBeFME0mJrSdhJmJP0hBF4oILXXhQhBFQSgK1Z1uxJcxqb6F00lTTKk4m2HuxznnnllaCb0QUdwmPMQ2AXMvCFqkXiMNM7CbRCyikqYh0KDcwpwDV9jyhAgtTtguYZKNMcSnJ6P3IUghV0JIrrvx+V18NZC4hGwlN5UEyL4g1OFQn6RtSLt6ytAhAnlU6PhoEPcvktv+59vjdKd4eJ+cvY6enr8+bpLeQ9IbfB8dJ5cvSXeYiVZDzHBbPaDgOnPHDhZ4BjTkOlBo+BSzA+tP7vrU594EldTtRtQWfkAhjLhXlIl66q/n3GAZXNziRM885ECwiCwoj7R5B81+wCR73r6FILQDh/y/ZR61MW9OASMiYhS4YD7dyZXiAgvf/tUN281iVitNlgVqxppZKW8aVauyVa6sG1bV2K7ONtTT0OwD8oU76AcZyM6M</source>
  </file>
  <file path="Table.php" generated-path="Table.html" hash="22217dff7d2c4b7e8dc04ab2220618ba" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="8" package="Default">
      <extends/>
      <name>Table</name>
      <full_name>\Swoole\Table</full_name>
      <docblock line="8">
        <description>内存表</description>
        <long-description></long-description>
        <tag name="package" line="8" description="Default"/>
      </docblock>
      <constant namespace="Swoole" line="10" package="Default">
        <name>TYPE_INT</name>
        <full_name>\Swoole\Table::TYPE_INT</full_name>
        <value>1</value>
        <docblock line="10">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="Swoole" line="11" package="Default">
        <name>TYPE_STRING</name>
        <full_name>\Swoole\Table::TYPE_STRING</full_name>
        <value>2</value>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="Swoole" line="12" package="Default">
        <name>TYPE_FLOAT</name>
        <full_name>\Swoole\Table::TYPE_FLOAT</full_name>
        <value>3</value>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="19" package="Default">
        <name>get</name>
        <full_name>\Swoole\Table::get()</full_name>
        <docblock line="19">
          <description>获取key</description>
          <long-description></long-description>
          <tag name="param" line="19" description="" type="" variable="$key"/>
          <tag name="return" line="19" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="29" package="Default">
        <name>set</name>
        <full_name>\Swoole\Table::set()</full_name>
        <docblock line="29">
          <description>设置key</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="" variable="$key"/>
          <tag name="param" line="29" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="29" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="38" package="Default">
        <name>del</name>
        <full_name>\Swoole\Table::del()</full_name>
        <docblock line="38">
          <description>删除key</description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="" variable="$key"/>
          <tag name="return" line="38" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="49" package="Default">
        <name>incr</name>
        <full_name>\Swoole\Table::incr()</full_name>
        <docblock line="49">
          <description>原子自增操作，可用于整形或浮点型列</description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$key"/>
          <tag name="param" line="49" description="" type="" variable="$column"/>
          <tag name="param" line="49" description="" type="" variable="$incrby"/>
          <tag name="return" line="49" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$incrby</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="59" package="Default">
        <name>decr</name>
        <full_name>\Swoole\Table::decr()</full_name>
        <docblock line="59">
          <description>原子自减操作，可用于整形或浮点型列</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="" variable="$key"/>
          <tag name="param" line="59" description="" type="" variable="$column"/>
          <tag name="param" line="59" description="" type="" variable="$decrby"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$decrby</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="69" package="Default">
        <name>column</name>
        <full_name>\Swoole\Table::column()</full_name>
        <docblock line="69">
          <description>增加字段定义</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="" variable="$name"/>
          <tag name="param" line="69" description="" type="" variable="$type"/>
          <tag name="param" line="69" description="" type="integer" variable="$len">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$len</name>
          <default>4</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="77" package="Default">
        <name>create</name>
        <full_name>\Swoole\Table::create()</full_name>
        <docblock line="77">
          <description>创建表，这里会申请操作系统内存</description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="85" package="Default">
        <name>lock</name>
        <full_name>\Swoole\Table::lock()</full_name>
        <docblock line="85">
          <description>锁定整个表</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="93" package="Default">
        <name>unlock</name>
        <full_name>\Swoole\Table::unlock()</full_name>
        <docblock line="93">
          <description>释放表锁</description>
          <long-description></long-description>
          <tag name="return" line="93" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJy1VMtKw0AU3ecrZpFFLYXiY6eiLlQEUdFsXMk0jlpMJyFJEREXCtr6agXrW6oWFyI0LlR81OrPZJJ05S84SVqpTaxx4WyGnDv3nHPv3ExXjzQnMQyGCaRIkEdgYkEUBdTJMNFwmAFhQNbXSPHIurymH1GGF6CiAA7GBMQsMYAuXsSKCrjJsf6poRHORrpBa2djaIIbHxoZpKE2T2hgeLSPs7Paqagdc4TtFQZW5pFkD+bRYg3olaAME4Cth2SkJmUMoCzDGhh19pkk5tW4iMEsUkN2SosDu76XvWLam1nWvGLuYr0BRxGw9cJfbmK0i/5mlKqZyLf85tZI+qJyfBWsDz8rTyMhQBtI5pwUd63UDSnkjb0dvXz28bpNsrdm7lp/yRj796RcMNIHxoNmrj6T/BZJHzZzVYV4UUgmcCMax7wc+0MF9vlq86qMkRqJPXZBC0tl/7uwaVRXmOcafIpwEwIUUciTzQtSPDS0B6Kd6M8bPtPK2r+zH64uSo14HKuAFRD29+r6CzmEETc/4hynTjt+m9lTUnqhDwftsvV+XElt668nZu7Oun10u2/elczSufu+BB8BXkZQRaHm2pXcCm0OvVL96cZ5uoKyCyI//xt3atPIvVFWKhKcOIl9qJc/AWnIvA8=</source>
  </file>
  <file path="Http/Client.php" generated-path="Http.Client.html" hash="405b885c6f6408f7036f73eaf1080c8c" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\Http" line="11" package="Default">
      <extends/>
      <name>Client</name>
      <full_name>\Swoole\Http\Client</full_name>
      <docblock line="11">
        <description>swoole_http_client</description>
        <long-description>Author: EagleWu &lt;eaglewudi@gmail.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="11" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole\Http" line="14" package="Default">
        <name>$setting</name>
        <full_name>\Swoole\Http\Client::setting</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="16" package="Default">
        <name>$set_headers</name>
        <full_name>\Swoole\Http\Client::set_headers</full_name>
        <default></default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="23" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Http\Client::__construct()</full_name>
        <docblock line="23">
          <description>swoole_http_client constructor.</description>
          <long-description></long-description>
          <tag name="param" line="23" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="23" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="32" package="Default">
        <name>set</name>
        <full_name>\Swoole\Http\Client::set()</full_name>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="32" description="" type="" variable="$setting"/>
          <tag name="return" line="32" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="40" package="Default">
        <name>setHeaders</name>
        <full_name>\Swoole\Http\Client::setHeaders()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="" variable="$headers"/>
          <tag name="return" line="40" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headers</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="49" package="Default">
        <name>setData</name>
        <full_name>\Swoole\Http\Client::setData()</full_name>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$data"/>
          <tag name="return" line="49" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="59" package="Default">
        <name>execute</name>
        <full_name>\Swoole\Http\Client::execute()</full_name>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="59" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="69" package="Default">
        <name>push</name>
        <full_name>\Swoole\Http\Client::push()</full_name>
        <docblock line="69">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="" variable="$data"/>
          <tag name="param" line="69" description="" type="integer" variable="$opcode">
            <type>integer</type>
          </tag>
          <tag name="param" line="69" description="" type="integer" variable="$fin">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$opcode</name>
          <default>WEBSOCKET_OPCODE_TEXT</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fin</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="77" package="Default">
        <name>isConnected</name>
        <full_name>\Swoole\Http\Client::isConnected()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="85" package="Default">
        <name>close</name>
        <full_name>\Swoole\Http\Client::close()</full_name>
        <docblock line="85">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="94" package="Default">
        <name>on</name>
        <full_name>\Swoole\Http\Client::on()</full_name>
        <docblock line="94">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="94" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="103" package="Default">
        <name>get</name>
        <full_name>\Swoole\Http\Client::get()</full_name>
        <docblock line="103">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="103" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="103" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="113" package="Default">
        <name>post</name>
        <full_name>\Swoole\Http\Client::post()</full_name>
        <docblock line="113">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="113" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="113" description="" type="mixed" variable="$post">
            <type>mixed</type>
          </tag>
          <tag name="param" line="113" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$post</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="122" package="Default">
        <name>upgrade</name>
        <full_name>\Swoole\Http\Client::upgrade()</full_name>
        <docblock line="122">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="122" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="127" package="Default">
        <name>__destruct</name>
        <full_name>\Swoole\Http\Client::__destruct()</full_name>
        <docblock line="127">
          <description></description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="32" code="PPC:ERR-50008">No summary for method set()</error>
      <error line="40" code="PPC:ERR-50008">No summary for method setHeaders()</error>
      <error line="49" code="PPC:ERR-50008">No summary for method setData()</error>
      <error line="59" code="PPC:ERR-50008">No summary for method execute()</error>
      <error line="69" code="PPC:ERR-50008">No summary for method push()</error>
      <error line="77" code="PPC:ERR-50008">No summary for method isConnected()</error>
      <error line="85" code="PPC:ERR-50008">No summary for method close()</error>
      <error line="94" code="PPC:ERR-50008">No summary for method on()</error>
      <error line="103" code="PPC:ERR-50008">No summary for method get()</error>
      <error line="113" code="PPC:ERR-50008">No summary for method post()</error>
      <error line="122" code="PPC:ERR-50008">No summary for method upgrade()</error>
      <error line="127" code="PPC:ERR-50008">No summary for method __destruct()</error>
      <error line="14" code="PPC:ERR-50007">No summary for property $setting</error>
      <error line="16" code="PPC:ERR-50007">No summary for property $set_headers</error>
    </parse_markers>
    <source>eJy1VMtq4zAU3fsr7sILN4S66aIDfU9TQ6GLDDTQWRSMIt/aYmRJ6EELQ/995IfSThKcNLRamfs459yH7/mVqlQUCVKjUYQiPLxIyfHpzlp1FkXpaBTBCExrzCtvzClnKKy3No6fzlZSn0JGSo6PDs6x+XhxBbsua8L4IZX1ZRN4SyyewvHR5CQ9Ok4nP7wtjSgnxsC0A/wbReCfcgvOKMQGrWWiPFuz5hWSArXpPa3C5m1SCVQKY7WjVurDEHatiCY1eLvHh7iSxq64mLBYooZYSR186Ucdz05Qy6SAPF8yJC3SuEs6aKP7kt7WlPY8ocilWaN1WoDHw0Fan5eE5EA1zNQ3bR+muy41CRg71lYQS/ah85tCkjZ7N6IwR6fZiqdmr1hA/MwEM9WqlIXflUEp+IrUWUwa4HFA2af25U5BLBWVBW7yePhBNcqZquvKOMDABTxmNw+z6X02z2e/prPbLJ9nv+edWO+dbFP7oRVIhvmZmUohkFoskk/ADmJSLg1uRft/ys2h2jxmSjhfEPpnkFKKpIUYv8d/x5ZtJi+bv/bz27SVWq1fsN1FNclBleoO2JeK20GCU6X2l2V7b9avb4H98V0Jf/sHuFzdOg==</source>
  </file>
  <file path="Buffer.php" generated-path="Buffer.html" hash="5697386644f4e8c393f2a5b62053d68f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="9" package="Default">
      <extends/>
      <name>Buffer</name>
      <full_name>\Swoole\Buffer</full_name>
      <docblock line="9">
        <description>Class swoole_buffer</description>
        <long-description>内存操作</long-description>
        <tag name="package" line="9" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="15" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Buffer::__construct()</full_name>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="15" description="" type="integer" variable="$size">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$size</name>
          <default>128</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="25" package="Default">
        <name>append</name>
        <full_name>\Swoole\Buffer::append()</full_name>
        <docblock line="25">
          <description>将一个字符串数据追加到缓存区末尾</description>
          <long-description></long-description>
          <tag name="param" line="25" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="25" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="39" package="Default">
        <name>substr</name>
        <full_name>\Swoole\Buffer::substr()</full_name>
        <docblock line="39">
          <description>从缓冲区中取出内容</description>
          <long-description>substr会复制一次内存
remove后内存并没有释放，只是底层进行了指针偏移。当销毁此对象时才会真正释放内存</long-description>
          <tag name="param" line="39" description="&lt;p&gt;表示偏移量，如果为负数，表示倒数计算偏移量&lt;/p&gt;" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;表示读取数据的长度，默认为从$offset到整个缓存区末尾&lt;/p&gt;" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;表示从缓冲区的头部将此数据移除。只有$offset = 0时此参数才有效&lt;/p&gt;" type="boolean" variable="$remove">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$remove</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="48" package="Default">
        <name>clear</name>
        <full_name>\Swoole\Buffer::clear()</full_name>
        <docblock line="48">
          <description>清理缓存区数据
执行此操作后，缓存区将重置。swoole_buffer对象就可以用来处理新的请求了。
swoole_buffer基于指针运算实现clear，并不会写内存</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="57" package="Default">
        <name>expand</name>
        <full_name>\Swoole\Buffer::expand()</full_name>
        <docblock line="57">
          <description>为缓存区扩容</description>
          <long-description></long-description>
          <tag name="param" line="57" description="&lt;p&gt;指定新的缓冲区尺寸，必须大于当前的尺寸&lt;/p&gt;" type="integer" variable="$new_size">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$new_size</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="72" package="Default">
        <name>write</name>
        <full_name>\Swoole\Buffer::write()</full_name>
        <docblock line="72">
          <description>向缓存区的任意内存位置写数据
此函数可以直接写内存。所以使用务必要谨慎，否则可能会破坏现有数据</description>
          <long-description>$data不能超过缓存区的最大尺寸。
write方法不会自动扩容</long-description>
          <tag name="param" line="72" description="&lt;p&gt;偏移量&lt;/p&gt;" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="param" line="72" description="&lt;p&gt;写入的数据&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="15" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJyFVNtuElEUfecrzkMfaqOp+mSijUY/wQ8gUxyUhA6EGazRmFBabk252JZe6YVIKVaBoZIKQykf4+wzZ578BfeZGUZKseUBwjn77L32WmvvZ8/D78IejyQsiHJY8Ink9WIoFBSfemZnZjxkhrwKCrJMZOvQOx/1+8UIHvMbSCagvkM3snq/hP9nPT4r9KUd88njIfixsvDPDHkRFiLCAglICpmSAx9F53zW+vVHJZ8SCEnE6/WFJFmJRH3KtBVG5sijx0/uWVGfrO/PN1KDmtQ7Mb1zBvVt40dV75zTokqzDTbow+oxpFXjcgOxwppGS99BvXLejSHDqgHpLZl6IyiCexURlWhE4qgn4xXCYVF6M209uh2k3stxGMlzhKF36pDfgpTGSWx0x/DI0XnEol/uQSUL6Qtsjf4o23QPQyLiQui9CIWcfQzdC3pepqWMmVqlm1d/Ltcgf0Z3mqAVoRVng31WXtO1JF1LmetpWMobp73fsTj0N8zNGG0u0XoFml3WKtPtC5rJYmWjdETrX+1s1ypPUjPk98uiQli5ZlQ0O7uZynMQ1Tg9LOkdjbWPUBE8cWJi6/iXNcpGY9uNn5Q5KEpvlXdOZtbsIWm2ssbeilkcgFbFnGZvhzUqWAUZdrCg5LTYRkNMFn5YYx5dTaZsLp0ioyphEai0zeUa+gspcioj2N0KZw8ZLmWGzc+Rh5w8JDIf54GZLF7SYnqya2yFp53H991G58iDR/ddRHPELwRl8XZb0U7CKCT/9WmBdC8zp6g8x26NKfoF+XJjsS0zlTX6Dezm2oTbZgC1Bfmm3jsxNmv04AQqK1iIbqlIC2v+oq04Ogpfuq69luFI07Wc7Tc2KHCdG4dGTvUFRSHCndFFW3OjQXL3mr/GiLLip+8YrI72r/3Mt5vzNOooSVz0WmsFsUFjz27HVRxUDZodjm+QMMs9qJxiFzgmkMlyM1i3k4GKH8IC3wPD/GOQb2yswhcXM2bWez26kreJ0PtcEuRlTEq0VqqPZ44m+22aO3HZQx1oJobnen+AcsFqGTtg1SWm1miCiw6FKqR38S1b7vP5Pm7DQR4FsVw6UmdYzlpoKBGGs4sEG6RG4dJSDKmx6RhxwGIkoIh0q0t/Fm1xWeoMVmt3auKM0P82weheJrzjxAnHMIp6TAwLyMh0TVjOn/8CvRlUXg==</source>
  </file>
  <file path="Redis.php" generated-path="Redis.html" hash="14bb54bbea5168fb60eb74a7ef8150dd" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="6" package="Default">
      <extends/>
      <name>Redis</name>
      <full_name>\Swoole\Redis</full_name>
      <docblock line="6">
        <description>异步Redis客户端</description>
        <long-description></long-description>
        <tag name="package" line="6" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="13" package="Default">
        <name>on</name>
        <full_name>\Swoole\Redis::on()</full_name>
        <docblock line="13">
          <description>注册事件回调函数</description>
          <long-description></long-description>
          <tag name="param" line="13" description="" type="" variable="$event_name"/>
          <tag name="param" line="13" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="24" package="Default">
        <name>connect</name>
        <full_name>\Swoole\Redis::connect()</full_name>
        <docblock line="24">
          <description>连接到服务器</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="24" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="24" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="32" package="Default">
        <name>close</name>
        <full_name>\Swoole\Redis::close()</full_name>
        <docblock line="32">
          <description>关闭连接</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="40" package="Default">
        <name>get</name>
        <full_name>\Swoole\Redis::get()</full_name>
        <docblock line="40">
          <description>获取KEY值</description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="" variable="$key"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="49" package="Default">
        <name>set</name>
        <full_name>\Swoole\Redis::set()</full_name>
        <docblock line="49">
          <description>将当前值设置为指定的数字</description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$value"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyNUk1LQkEU3c+vmMVb2EPwBxTUplW7WrWKcZr04TjzcJ5GiBB9qJXaIkqyEAoEIXw9EDJM6884T/sXvQ+jnD7v5g733nPOPTOzsGgmTcBQmggTYQLXtjmnZB7EdB1AHcrBnttprZJNQ0j71i33xnf3Xj0GMEVCwKAB8gB6ESD80KHbbctiZdQ/GT09yKvmxNmXpaF77rz3l0yUQWmokRxh1oYvrnQwohTFKYGaf4ojnJoOxIK8lWXYMjiDnEU+kUS/wc0FgDwIUgGom05emm6tJcuOe12Vxzfysq1sIqyMwRJQS3JhKS2DWVAzeUat/3d5zBkj2IoE3NGQKrTgY75amDpQLcjD7mu9Exr5QYhyQSIKjXoRtZ48vVhZXpe7A/WZUmRnhtjMxqmBP/gTxPqDXTpFOTyTR1WPfWI/j4f26LHvVkrSbowbB97PkJ36dFYVzyGaJb/KC08+HJtdovAG81PvHQ==</source>
  </file>
  <file path="Websocket/Frame.php" generated-path="Websocket.Frame.html" hash="4db2f142e7c1eba4872bca31f703ec24" package="Default">
    <docblock line="0">
      <description>swoole-ide-helper.</description>
      <long-description>Author: wudi &lt;wudi23@baidu.com&gt;
Date: 2016/02/17</long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\WebSocket" line="12" package="Default">
      <extends/>
      <name>Frame</name>
      <full_name>\Swoole\WebSocket\Frame</full_name>
      <docblock line="12">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="12" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="17" package="Default">
        <name>$fd</name>
        <full_name>\Swoole\WebSocket\Frame::fd</full_name>
        <default></default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="22" package="Default">
        <name>$finish</name>
        <full_name>\Swoole\WebSocket\Frame::finish</full_name>
        <default></default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="22" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="27" package="Default">
        <name>$opcode</name>
        <full_name>\Swoole\WebSocket\Frame::opcode</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\WebSocket" line="32" package="Default">
        <name>$data</name>
        <full_name>\Swoole\WebSocket\Frame::data</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
    </class>
    <parse_markers>
      <error line="12" code="PPC:ERR-50005">No summary for class \Swoole\WebSocket\Frame</error>
      <error line="17" code="PPC:ERR-50007">No summary for property $fd</error>
      <error line="22" code="PPC:ERR-50007">No summary for property $finish</error>
      <error line="27" code="PPC:ERR-50007">No summary for property $opcode</error>
      <error line="32" code="PPC:ERR-50007">No summary for property $data</error>
    </parse_markers>
    <source>eJyVjjEOwjAMRXefwgNTJZpSJJBKBUVCXICBhSVNDIkoTZSkdEDcnbRiLAN/sGX7P9vlzioLLEkAE/S9MQ3NtaS5osaSS2N3GOy7oIwrsO+kxnKI+bKquZZdKsxjO1gOPFCBebZYsSxni3XsMYCWP8hbLghP4+7LmeqTEXcKGwAQDfcejy6a4AUYNT4yKMHqyR3qNnxrNmbb1Y0WOLvKyE8BdbwyTehWe/WD8sHp9jbJGSuMpP85yQPfwPsD9EhaSQ==</source>
  </file>
  <file path="Http/Server.php" generated-path="Http.Server.html" hash="a7e7a06b3b744979b02ffa4490aee842" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole\Http" line="9" package="Default">
      <extends>\swoole_server</extends>
      <name>Server</name>
      <full_name>\Swoole\Http\Server</full_name>
      <docblock line="9">
        <description>Class swoole_http_server</description>
        <long-description>内置 Web 服务器</long-description>
        <tag name="package" line="9" description="Default"/>
        <tag name="inherited_from" description="\swoole_server" refers="\swoole_server" link="/classes/swoole_server.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole\Http" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole\Http" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="16" package="Default">
        <name>setGlobal</name>
        <full_name>\Swoole\Http\Server::setGlobal()</full_name>
        <docblock line="16">
          <description>启用数据合并，HTTP请求数据到PHP的GET/POST/COOKIE全局数组</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="" variable="$flag"/>
          <tag name="param" line="16" description="" type="integer" variable="$request_flag">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$request_flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole\Http" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyzsS/IKODiykvMTS0uSExOVQguz8/PSY3xKCkpsObS19LiUtBScM5JLC5WKAbLxGcAZeKLU4vKUouAciBphadtrc/3rlMIT01SeDan92nXwqczVwAl9LmSwRqDwYoVUitKUvNSihVioAZBzajmUgACsE0goKXwdML651NWPJu64VnvuqcTOp7u3PZ+T49HSEjAi/Xbn21sgkp0bAjwCHg+q8XdNUQ/wD84RN/Z39/b0/Vp64qnGxuAap7vboEZ6FCQWJSYC+aopOUkpqOJZ+aVKKgUpRaWphaXxCPJ64PptNK85JLM/DyF4tQS95z8pMQcDbAhOqh6FGwVDDTBGiD+qeWq5QIAtDSAsA==</source>
  </file>
  <file path="Lock.php" generated-path="Lock.html" hash="946890feffc23e40cc2b64bd6b170aac" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="7" package="Default">
      <extends/>
      <name>Lock</name>
      <full_name>\Swoole\Lock</full_name>
      <docblock line="7">
        <description>Class swoole_lock</description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="16" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Lock::__construct()</full_name>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="16" description="&lt;p&gt;为锁的类型&lt;/p&gt;" type="integer" variable="$type">
            <type>integer</type>
          </tag>
          <tag name="param" line="16" description="&lt;p&gt;当类型为SWOOLE_FILELOCK时必须传入，指定文件锁的路径&#10;注意每一种类型的锁支持的方法都不一样。如读写锁、文件锁可以支持 $lock-&gt;lock_read()。&#10;另外除文件锁外，其他类型的锁必须在父进程内创建，这样fork出的子进程之间才可以互相争抢锁。&lt;/p&gt;" type="string" variable="$lockfile">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lockfile</name>
          <default>NULL</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="26" package="Default">
        <name>lock</name>
        <full_name>\Swoole\Lock::lock()</full_name>
        <docblock line="26">
          <description>加锁操作</description>
          <long-description>如果有其他进程持有锁，那这里将进入阻塞，直到持有锁的进程unlock。</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="39" package="Default">
        <name>trylock</name>
        <full_name>\Swoole\Lock::trylock()</full_name>
        <docblock line="39">
          <description>加锁操作</description>
          <long-description>与lock方法不同的是，trylock()不会阻塞，它会立即返回。
当返回false时表示抢锁失败，有其他进程持有锁。返回true时表示加锁成功，此时可以修改共享变量。

SWOOlE_SEM 信号量没有trylock方法</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="47" package="Default">
        <name>unlock</name>
        <full_name>\Swoole\Lock::unlock()</full_name>
        <docblock line="47">
          <description>释放锁</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="60" package="Default">
        <name>lock_read</name>
        <full_name>\Swoole\Lock::lock_read()</full_name>
        <docblock line="60">
          <description>阻塞加锁</description>
          <long-description>lock_read方法仅可用在读写锁(SWOOLE_RWLOCK)和文件锁(SWOOLE_FILELOCK)中，表示仅仅锁定读。
在持有读锁的过程中，其他进程依然可以获得读锁，可以继续发生读操作。但不能$lock-&gt;lock()或$lock-&gt;trylock()，这两个方法是获取独占锁的。

当另外一个进程获得了独占锁(调用$lock-&gt;lock/$lock-&gt;trylock)时，$lock-&gt;lock_read()会发生阻塞，直到持有锁的进程释放。</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="70" package="Default">
        <name>trylock_read</name>
        <full_name>\Swoole\Lock::trylock_read()</full_name>
        <docblock line="70">
          <description>非阻塞加锁</description>
          <long-description>此方法与lock_read相同，但是非阻塞的。调用会立即返回，必须检测返回值以确定是否拿到了锁。</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="16" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJydVV1PGlEQfedX7EMfwLThB/QzMTZpSmtS0/SRUIotEYEApjGmCVX5UMC1ShEFUVpqSVtBq1VkRX5M79zdfepf6NydZaXaqikxmL07M/fMOWeGW3fDr8K2oGfcFw17vD5p5HUoFPDdtNmcAwM2aUAaDHiiUSlqnLoDIe8YHjptXuPUJR6nbDYJP0a4+AxI98KeiGdc8gdj0rXYZNgnsVZbz79V12bVXQUqmTNx0VjEH3wpXRPFR/0BnwSdZQrEvJFnw8OuIff9B64h1/DgQ75yAN2EXlXY8SYkPv06zvJsChprvJBiygFdoh024WS2dwnfq/NZmTdl1oqrn3NUGKMwluebPCsyeOGI773XZzqslcMwvnn4Mz4NW9NaU4HkKkb+jL+1bgC5yZRPlEugb9wR3+6Iz/PC7sDM3tUgb0GtoK/WTnNrBYQMiQOmFPqRUE9QrqvpA61bUusZSCYgXQKljfFadxUhjYYiY5BqYwJsL1IQO8roK/t8LkeYWHtJLbVYe47PfzBA95A4jf/hiecBv1canQh6Y/5QUHK7vaEgkj/hjdkNna73aXBbevzU5XIYiVPG9xvbOaFhflPQuJxjnbJ5Zr3amuaVMi/PUbOEFxnDE0zBpvTpj9iXnsrCThLfoph6UYFqBV+ppX1I71jBQlIjfSIo4F3Wloix/z9w1loQFcgS6AdYzAqHFJsILBaZpOrCJ8drFmBozOCj+jUDuT2tm4dSpd8FnWU6G/UEoj40sFatq7U2aQS1XW3fsPE/mMJClI06nSab+NOLML8hkrdrYjDIBN0Gzx9BYpe1v4Jc1FPyKZYeJDFUgSH3yNAjiXWrIB9iFP9exRvNDqn7C2m2uLiYaT01z/MnCPbCYqTspbUMvqn3Mx1ZA2jqpiSQDTVfx5Gyhthu7pInz8QmccBS1ppL+5k1gwJvi8EzyMZi+CfEaqxhsX5py3USCo97Rk2JuTSy+/VkJ+vqrKmQtnAIJyuUIsKMQ1X5rCrbIL9T8xv4iqyJV7FOEs2mzXT6No3dwdMF89mSgfYEa9VY6wuRgJ4VV8kFNfMNcpsE8LwZ0J+0qHDzYS7hJYysnbRy7drODBLaB8P5JwQHWhBBnN+IOBrU16UDTma5yoCbpS/xy3rlAsuIoTGHfMEqifsTBx4hIu/In1WBmCMKzoy6kNBY3/xjnP/I0CHEj4Wo1Yb4bSo2YXGLZ7rYMzJ6hc1sMvq3JrHN3weu4mE=</source>
  </file>
  <file path="Process.php" generated-path="Process.html" hash="bc15cab251b4204ef84980e58ad95653" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="10" package="Default">
      <extends/>
      <name>Process</name>
      <full_name>\Swoole\Process</full_name>
      <docblock line="10">
        <description>swoole进程管理类
内置IPC通信支持，子进程和主进程之间可以方便的通信
支持标准输入输出重定向，子进程内echo，会发送到管道中，而不是输出屏幕
Class swoole_process</description>
        <long-description></long-description>
        <tag name="package" line="10" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole" line="17" package="Default">
        <name>$pid</name>
        <full_name>\Swoole\Process::pid</full_name>
        <default></default>
        <docblock line="17">
          <description>进程的PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="24" package="Default">
        <name>$pipe</name>
        <full_name>\Swoole\Process::pipe</full_name>
        <default></default>
        <docblock line="24">
          <description>管道PIPE</description>
          <long-description></long-description>
          <tag name="var" line="24" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="31" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Process::__construct()</full_name>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;子进程的回调函数&lt;/p&gt;" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="31" description="&lt;p&gt;是否重定向标准输入输出&lt;/p&gt;" type="boolean" variable="$redirect_stdin_stdout">
            <type>boolean</type>
          </tag>
          <tag name="param" line="31" description="&lt;p&gt;是否创建管道&lt;/p&gt;" type="boolean" variable="$create_pipe">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$redirect_stdin_stdout</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$create_pipe</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="41" package="Default">
        <name>write</name>
        <full_name>\Swoole\Process::write()</full_name>
        <docblock line="41">
          <description>向管道内写入数据</description>
          <long-description></long-description>
          <tag name="param" line="41" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="41" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="51" package="Default">
        <name>read</name>
        <full_name>\Swoole\Process::read()</full_name>
        <docblock line="51">
          <description>从管道内读取数据</description>
          <long-description></long-description>
          <tag name="param" line="51" description="&lt;p&gt;最大读取的长度&lt;/p&gt;" type="integer" variable="$buffer_len">
            <type>integer</type>
          </tag>
          <tag name="return" line="51" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$buffer_len</name>
          <default>8192</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="61" package="Default">
        <name>_exit</name>
        <full_name>\Swoole\Process::_exit()</full_name>
        <docblock line="61">
          <description>退出子进程，实际函数名为exit，IDE将exit识别为关键词了，会有语法错误，所以这里叫_exit</description>
          <long-description></long-description>
          <tag name="param" line="61" description="" type="integer" variable="$code">
            <type>integer</type>
          </tag>
          <tag name="return" line="61" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="71" package="Default">
        <name>exec</name>
        <full_name>\Swoole\Process::exec()</full_name>
        <docblock line="71">
          <description>执行另外的一个程序</description>
          <long-description></long-description>
          <tag name="param" line="71" description="&lt;p&gt;可执行文件的路径&lt;/p&gt;" type="string" variable="$execute_file">
            <type>string</type>
          </tag>
          <tag name="param" line="71" description="&lt;p&gt;参数数组&lt;/p&gt;" type="array" variable="$params">
            <type>array</type>
          </tag>
          <tag name="return" line="71" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$execute_file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="82" package="Default">
        <name>wait</name>
        <full_name>\Swoole\Process::wait()</full_name>
        <docblock line="82">
          <description>阻塞等待子进程退出，并回收
成功返回一个数组包含子进程的PID和退出状态码
如array('code' =&gt; 0, 'pid' =&gt; 15001)，失败返回false</description>
          <long-description></long-description>
          <tag name="return" line="82" description="| array" type="false">
            <type>false</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="91" package="Default">
        <name>daemon</name>
        <full_name>\Swoole\Process::daemon()</full_name>
        <docblock line="91">
          <description>守护进程化</description>
          <long-description></long-description>
          <tag name="param" line="91" description="" type="boolean" variable="$nochdir">
            <type>boolean</type>
          </tag>
          <tag name="param" line="91" description="" type="boolean" variable="$noclose">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nochdir</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$noclose</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="101" package="Default">
        <name>useQueue</name>
        <full_name>\Swoole\Process::useQueue()</full_name>
        <docblock line="101">
          <description>创建消息队列</description>
          <long-description></long-description>
          <tag name="param" line="101" description="&lt;p&gt;消息队列KEY&lt;/p&gt;" type="integer" variable="$msgkey">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="&lt;p&gt;模式&lt;/p&gt;" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$msgkey</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>2</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="110" package="Default">
        <name>push</name>
        <full_name>\Swoole\Process::push()</full_name>
        <docblock line="110">
          <description>向消息队列推送数据</description>
          <long-description></long-description>
          <tag name="param" line="110" description="" type="" variable="$data"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="120" package="Default">
        <name>pop</name>
        <full_name>\Swoole\Process::pop()</full_name>
        <docblock line="120">
          <description>从消息队列中提取数据</description>
          <long-description></long-description>
          <tag name="param" line="120" description="" type="integer" variable="$maxsize">
            <type>integer</type>
          </tag>
          <tag name="return" line="120" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$maxsize</name>
          <default>8192</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="131" package="Default">
        <name>kill</name>
        <full_name>\Swoole\Process::kill()</full_name>
        <docblock line="131">
          <description>向某个进程发送信号</description>
          <long-description></long-description>
          <tag name="param" line="131" description="" type="" variable="$pid"/>
          <tag name="param" line="131" description="" type="integer" variable="$sig">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$pid</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sig</name>
          <default>SIGTERM</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="141" package="Default">
        <name>signal</name>
        <full_name>\Swoole\Process::signal()</full_name>
        <docblock line="141">
          <description>注册信号处理函数
require swoole 1.7.9+</description>
          <long-description></long-description>
          <tag name="param" line="141" description="" type="integer" variable="$signo">
            <type>integer</type>
          </tag>
          <tag name="param" line="141" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$signo</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="150" package="Default">
        <name>start</name>
        <full_name>\Swoole\Process::start()</full_name>
        <docblock line="150">
          <description>启动子进程</description>
          <long-description></long-description>
          <tag name="return" line="150" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="158" package="Default">
        <name>name</name>
        <full_name>\Swoole\Process::name()</full_name>
        <docblock line="158">
          <description>为工作进程重命名</description>
          <long-description></long-description>
          <tag name="param" line="158" description="" type="" variable="$process_name"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="31" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJyVVt1P21YUf89fcR+QSFlWoNK0VVu2Si2a0DSJrXvZU2ScC1gYO/PHSrdVSjryAQ1NWIHyJSgSUDREDKLiIwHyz/g69tP+hZ3r67iJcZLND4l97z3n/M7X756vvklNpSISN4PVFMdj9PSZLIv4y0hkcGAgggaQ6n7b9c3G4atGZbdRzjVOa3SD5LKNm8ro2GMnvWHWd61lwypm/rkukuMyO03+KpqXNfZuXr1y3n4gJcOs7VurV+ZtvbExxwSpLiZsvcuTfM6+fUOy+/Q3X3Xyi6SyQcpLbXpzWcxPybBkXm+Q0pKTzpDCCWBzMm/My2NYt9NgedFaM5gWcloiVyvUzmORU1XPpURKkXmsqrA+GOHdjTFv5fcIgscNAH0GkOf+xtzY6BNvrbn16FdOQYKked+D7n9KHxcFHvWlhCREMqCMIR0bHRv5f6pS+K6uRylO4WbQjDCLk6iP50RxnOOnkR8rgEw2t+2TP0n+xlo5CYiNQxxQn4KTgoJ5LaFqSUGiv7KuIYgeKR/4Cbibm1BdvII5DUILYD0NpLBJalXmc5tjE7rEa4IsoUSClyVVU3Rei/ouxDrhiqMJTlRxrN1WHIE8vucqZtl7cSdW4AWDAQVEcuvgCETEWqwEs8D8AUCCNIn6kpzG+VsK1nRFupMj35VniqDhqCvTHYtZe+1jsY0aKa12wwL2UN+4PjGBlYSIJWRtpcneeyZH+2ilTqoHQZDMgXCcELlktFVjHH0x/PBBd8xOOk2bqVlatCUr2856lpUWKS+al1U8K2iwMfpkhJzk6Idt5EjhCHZI9sxZrtjGolnNsda1tuZt49g6W3GW123DgEVrPg38YNfXnXyRlI4SVEGXiPByEv/n1LjKoq4MeDvU3VVr/r29CxAOyB4NsHmZNi//ptRTLXUoEzyLeR2qcUIQMQKeYxqs1bxZOwcN9oVBbucCspyicM+hs+mHCkIvaQ2snDRqc0GvaHOFu0XtRtusx5oae2RzrUZ2txvH8+Q26+eUpZhm9uoceMNaPvcjUiiThR27vgzLLBwMKSlmSfmolW+AIoH5mabGwrmVzjTeZfwePHjpeh3tp4noR/Gv0VAM9QNPuu/Dnw0NDd+j9vdO7Q/7zJzb78Ey8ALj7qE/WCjbIqRqnAa8+bE1OUh/D4KoFKyFPe+SKa6GEpwk81NAS532RNmHGg4jyeEZWYo29bTQmSfdXGlC7YTVpVXrvGBlDGdthxTehnXIjDo5jZ+j1mPfjfwcepL2hXW4S65L4YWmq/gHHevAbp7SOPp0OOYJxtGDXnjhCmlBYb0+hGu7jfOacFoZN4AhpatT7ezamV5brcFUYJXKQZJt95+bVYXf7tBJNxJNyaloUy5AoF2CsFOG3vFqzJ1dYAQipYtwmqMPHSLCEKvCZNdKmxZEMUqFY+5ZQPh09NufRn78vgf1nR2SXJGBIntzMO+1jw4K/kWHa9kbotDw/c/vP/ykAz5J7j6ndMVP5TnwwNUT+yjU65I3yMKhz0cdaKPjLQEglF40QS+zi33zZsvjTBiRlm7g+gvWsTdfJuhsHW6N7kTbzgUK6EXkX1KxZ6I=</source>
  </file>
  <file path="Timer.php" generated-path="Timer.html" hash="eb0874c9d5e670579d7e734db79d0d16" package="Default">
    <docblock line="0">
      <description>swoole-ide-helper.</description>
      <long-description>Author: wudi &lt;wudi23@baidu.com&gt;
Date: 2016/02/17</long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="12" package="Default">
      <extends/>
      <name>Timer</name>
      <full_name>\Swoole\Timer</full_name>
      <docblock line="12">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="12" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="18" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Timer::tick()</full_name>
        <docblock line="18">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="18" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="18" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="27" package="Default">
        <name>after</name>
        <full_name>\Swoole\Timer::after()</full_name>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="27" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Swoole" line="35" package="Default">
        <name>clear</name>
        <full_name>\Swoole\Timer::clear()</full_name>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="35" description="" type="integer" variable="$timerId">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$timerId</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="12" code="PPC:ERR-50005">No summary for class \Swoole\Timer</error>
      <error line="18" code="PPC:ERR-50008">No summary for method tick()</error>
      <error line="27" code="PPC:ERR-50008">No summary for method after()</error>
      <error line="35" code="PPC:ERR-50008">No summary for method clear()</error>
    </parse_markers>
    <source>eJy1UD2LAjEQ7edXTGFxt6jRFRQ8UQ+usfb+wGx2ZIPJJiRZLMT/fkmwksNKp5iPlzfvDdnsXOdAVBVgheFireaJannSsXbspwnND99D7Kxf42VoFW5yrhf7hlQ7TKU120z5ochrrGfzpZjVYr5KmADoyXBwJBmPRfsLAKSmEPBXGfZwBUxR7HNUuHfkyaDqI45MeEAlaU2NZhzlriF5vhNEqSFSVBJPQy+jsj2m4fyRVMb/LH6WjSuUcoN3nkGnyP4Fd8T8Y4f2qZfUTMnrTn0Qv/0BndKHtQ==</source>
  </file>
  <file path="Constants.php" generated-path="Constants.html" hash="a0b74890021b15e8234b9e00e6387684" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <constant namespace="" line="3" package="Default">
      <name>SWOOLE_VERSION</name>
      <full_name>\SWOOLE_VERSION</full_name>
      <value>'1.8.1'</value>
      <docblock line="3">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="3" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="5" package="Default">
      <name>HTTP_GLOBAL_ALL</name>
      <full_name>\HTTP_GLOBAL_ALL</full_name>
      <value>1</value>
      <docblock line="5">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="5" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="6" package="Default">
      <name>HTTP_GLOBAL_GET</name>
      <full_name>\HTTP_GLOBAL_GET</full_name>
      <value>2</value>
      <docblock line="6">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="6" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="7" package="Default">
      <name>HTTP_GLOBAL_POST</name>
      <full_name>\HTTP_GLOBAL_POST</full_name>
      <value>4</value>
      <docblock line="7">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="7" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="8" package="Default">
      <name>HTTP_GLOBAL_COOKIE</name>
      <full_name>\HTTP_GLOBAL_COOKIE</full_name>
      <value>8</value>
      <docblock line="8">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="8" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="13" package="Default">
      <name>SWOOLE_BASE</name>
      <full_name>\SWOOLE_BASE</full_name>
      <value>1</value>
      <docblock line="13">
        <description>new swoole_server 构造函数参数</description>
        <long-description></long-description>
        <tag name="package" line="13" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="14" package="Default">
      <name>SWOOLE_THREAD</name>
      <full_name>\SWOOLE_THREAD</full_name>
      <value>2</value>
      <docblock line="14">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="14" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="15" package="Default">
      <name>SWOOLE_PROCESS</name>
      <full_name>\SWOOLE_PROCESS</full_name>
      <value>3</value>
      <docblock line="15">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="15" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="16" package="Default">
      <name>SWOOLE_PACKET</name>
      <full_name>\SWOOLE_PACKET</full_name>
      <value>16</value>
      <docblock line="16">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="16" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="21" package="Default">
      <name>SWOOLE_SOCK_TCP</name>
      <full_name>\SWOOLE_SOCK_TCP</full_name>
      <value>1</value>
      <docblock line="21">
        <description>new swoole_client 构造函数参数</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="22" package="Default">
      <name>SWOOLE_SOCK_TCP6</name>
      <full_name>\SWOOLE_SOCK_TCP6</full_name>
      <value>3</value>
      <docblock line="22">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="23" package="Default">
      <name>SWOOLE_SOCK_UDP</name>
      <full_name>\SWOOLE_SOCK_UDP</full_name>
      <value>2</value>
      <docblock line="23">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="24" package="Default">
      <name>SWOOLE_SOCK_UDP6</name>
      <full_name>\SWOOLE_SOCK_UDP6</full_name>
      <value>4</value>
      <docblock line="24">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="24" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="25" package="Default">
      <name>SWOOLE_SOCK_UNIX_DGRAM</name>
      <full_name>\SWOOLE_SOCK_UNIX_DGRAM</full_name>
      <value>5</value>
      <docblock line="25">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="26" package="Default">
      <name>SWOOLE_SOCK_UNIX_STREAM</name>
      <full_name>\SWOOLE_SOCK_UNIX_STREAM</full_name>
      <value>6</value>
      <docblock line="26">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="26" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="28" package="Default">
      <name>SWOOLE_SSL</name>
      <full_name>\SWOOLE_SSL</full_name>
      <value>5</value>
      <docblock line="28">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="28" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="30" package="Default">
      <name>SWOOLE_TCP</name>
      <full_name>\SWOOLE_TCP</full_name>
      <value>1</value>
      <docblock line="30">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="30" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="31" package="Default">
      <name>SWOOLE_TCP6</name>
      <full_name>\SWOOLE_TCP6</full_name>
      <value>2</value>
      <docblock line="31">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="31" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="32" package="Default">
      <name>SWOOLE_UDP</name>
      <full_name>\SWOOLE_UDP</full_name>
      <value>3</value>
      <docblock line="32">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="32" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="33" package="Default">
      <name>SWOOLE_UDP6</name>
      <full_name>\SWOOLE_UDP6</full_name>
      <value>4</value>
      <docblock line="33">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="33" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="34" package="Default">
      <name>SWOOLE_UNIX_DGRAM</name>
      <full_name>\SWOOLE_UNIX_DGRAM</full_name>
      <value>5</value>
      <docblock line="34">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="34" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="35" package="Default">
      <name>SWOOLE_UNIX_STREAM</name>
      <full_name>\SWOOLE_UNIX_STREAM</full_name>
      <value>6</value>
      <docblock line="35">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="35" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="37" package="Default">
      <name>SWOOLE_SOCK_SYNC</name>
      <full_name>\SWOOLE_SOCK_SYNC</full_name>
      <value>0</value>
      <docblock line="37">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="37" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="38" package="Default">
      <name>SWOOLE_SOCK_ASYNC</name>
      <full_name>\SWOOLE_SOCK_ASYNC</full_name>
      <value>1</value>
      <docblock line="38">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="38" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="40" package="Default">
      <name>SWOOLE_SYNC</name>
      <full_name>\SWOOLE_SYNC</full_name>
      <value>0</value>
      <docblock line="40">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="40" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="41" package="Default">
      <name>SWOOLE_ASYNC</name>
      <full_name>\SWOOLE_ASYNC</full_name>
      <value>1</value>
      <docblock line="41">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="41" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="43" package="Default">
      <name>SWOOLE_KEEP</name>
      <full_name>\SWOOLE_KEEP</full_name>
      <value>512</value>
      <docblock line="43">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="43" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="48" package="Default">
      <name>SWOOLE_FILELOCK</name>
      <full_name>\SWOOLE_FILELOCK</full_name>
      <value>2</value>
      <docblock line="48">
        <description>new swoole_lock构造函数参数</description>
        <long-description></long-description>
        <tag name="package" line="48" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="49" package="Default">
      <name>SWOOLE_MUTEX</name>
      <full_name>\SWOOLE_MUTEX</full_name>
      <value>3</value>
      <docblock line="49">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="49" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="50" package="Default">
      <name>SWOOLE_RWLOCK</name>
      <full_name>\SWOOLE_RWLOCK</full_name>
      <value>1</value>
      <docblock line="50">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="50" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="51" package="Default">
      <name>SWOOLE_SPINLOCK</name>
      <full_name>\SWOOLE_SPINLOCK</full_name>
      <value>5</value>
      <docblock line="51">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="51" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="52" package="Default">
      <name>SWOOLE_SEM</name>
      <full_name>\SWOOLE_SEM</full_name>
      <value>4</value>
      <docblock line="52">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="52" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="54" package="Default">
      <name>SWOOLE_EVENT_WRITE</name>
      <full_name>\SWOOLE_EVENT_WRITE</full_name>
      <value>1</value>
      <docblock line="54">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="54" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="55" package="Default">
      <name>SWOOLE_EVENT_READ</name>
      <full_name>\SWOOLE_EVENT_READ</full_name>
      <value>2</value>
      <docblock line="55">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="55" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="57" package="Default">
      <name>SWOOLE_SSLv3_METHOD</name>
      <full_name>\SWOOLE_SSLv3_METHOD</full_name>
      <value>1</value>
      <docblock line="57">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="57" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="58" package="Default">
      <name>SWOOLE_SSLv3_SERVER_METHOD</name>
      <full_name>\SWOOLE_SSLv3_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="58">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="58" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="59" package="Default">
      <name>SWOOLE_SSLv3_CLIENT_METHOD</name>
      <full_name>\SWOOLE_SSLv3_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="59">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="59" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="60" package="Default">
      <name>SWOOLE_SSLv23_METHOD</name>
      <full_name>\SWOOLE_SSLv23_METHOD</full_name>
      <value>1</value>
      <docblock line="60">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="60" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="61" package="Default">
      <name>SWOOLE_SSLv23_SERVER_METHOD</name>
      <full_name>\SWOOLE_SSLv23_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="61">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="61" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="62" package="Default">
      <name>SWOOLE_SSLv23_CLIENT_METHOD</name>
      <full_name>\SWOOLE_SSLv23_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="62">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="62" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="63" package="Default">
      <name>SWOOLE_TLSv1_METHOD</name>
      <full_name>\SWOOLE_TLSv1_METHOD</full_name>
      <value>1</value>
      <docblock line="63">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="63" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="64" package="Default">
      <name>SWOOLE_TLSv1_SERVER_METHOD</name>
      <full_name>\SWOOLE_TLSv1_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="64">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="64" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="65" package="Default">
      <name>SWOOLE_TLSv1_CLIENT_METHOD</name>
      <full_name>\SWOOLE_TLSv1_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="65">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="65" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="66" package="Default">
      <name>SWOOLE_TLSv1_1_METHOD</name>
      <full_name>\SWOOLE_TLSv1_1_METHOD</full_name>
      <value>1</value>
      <docblock line="66">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="66" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="67" package="Default">
      <name>SWOOLE_TLSv1_1_SERVER_METHOD</name>
      <full_name>\SWOOLE_TLSv1_1_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="67">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="67" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="68" package="Default">
      <name>SWOOLE_TLSv1_1_CLIENT_METHOD</name>
      <full_name>\SWOOLE_TLSv1_1_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="68">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="68" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="69" package="Default">
      <name>SWOOLE_TLSv1_2_METHOD</name>
      <full_name>\SWOOLE_TLSv1_2_METHOD</full_name>
      <value>1</value>
      <docblock line="69">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="69" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="70" package="Default">
      <name>SWOOLE_TLSv1_2_SERVER_METHOD</name>
      <full_name>\SWOOLE_TLSv1_2_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="70">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="70" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="71" package="Default">
      <name>SWOOLE_TLSv1_2_CLIENT_METHOD</name>
      <full_name>\SWOOLE_TLSv1_2_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="71">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="71" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="72" package="Default">
      <name>SWOOLE_DTLSv1_METHOD</name>
      <full_name>\SWOOLE_DTLSv1_METHOD</full_name>
      <value>1</value>
      <docblock line="72">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="72" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="73" package="Default">
      <name>SWOOLE_DTLSv1_SERVER_METHOD</name>
      <full_name>\SWOOLE_DTLSv1_SERVER_METHOD</full_name>
      <value>1</value>
      <docblock line="73">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="73" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="74" package="Default">
      <name>SWOOLE_DTLSv1_CLIENT_METHOD</name>
      <full_name>\SWOOLE_DTLSv1_CLIENT_METHOD</full_name>
      <value>1</value>
      <docblock line="74">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="74" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="76" package="Default">
      <name>WEBSOCKET_OPCODE_TEXT</name>
      <full_name>\WEBSOCKET_OPCODE_TEXT</full_name>
      <value>1</value>
      <docblock line="76">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="76" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="77" package="Default">
      <name>WEBSOCKET_OPCODE_BINARY</name>
      <full_name>\WEBSOCKET_OPCODE_BINARY</full_name>
      <value>2</value>
      <docblock line="77">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="77" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="79" package="Default">
      <name>WEBSOCKET_STATUS_CONNECTION</name>
      <full_name>\WEBSOCKET_STATUS_CONNECTION</full_name>
      <value>1</value>
      <docblock line="79">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="79" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="80" package="Default">
      <name>WEBSOCKET_STATUS_HANDSHAKE</name>
      <full_name>\WEBSOCKET_STATUS_HANDSHAKE</full_name>
      <value>2</value>
      <docblock line="80">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="80" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="81" package="Default">
      <name>WEBSOCKET_STATUS_FRAME</name>
      <full_name>\WEBSOCKET_STATUS_FRAME</full_name>
      <value>3</value>
      <docblock line="81">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="81" description="Default"/>
      </docblock>
    </constant>
    <constant namespace="" line="82" package="Default">
      <name>WEBSOCKET_STATUS_ACTIVE</name>
      <full_name>\WEBSOCKET_STATUS_ACTIVE</full_name>
      <value>3</value>
      <docblock line="82">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="82" description="Default"/>
      </docblock>
    </constant>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJyVVl1P01AYvt+v2N2EGMaKLCSYmK49sGZdu/QcGFw1ZNRIIGzZ5vBSCHEg0xkFjICEaYiLinhhhDBI/0w/tiv/gqe0jNF27OymN+/z0fc57/l4/CT3LBcIzCtPF5aVByGYFkUeyNNAgpwohB4GQ5GhsaFIaGA8GA7rVx/0zTdwJZtdUsy9dXNzwzj4qVfPbulxhFLyJC/GaF6meR7zIwPjvtVJgHCV6lJNidAqP+pSZkQxwQEMGMOAQHhwMBAcDC4rK8HC9b/JBSVfUvJB43C99fJIL18ZO7/16hr+YlzY3WuMhsD+UdyidqWa2/XYXEEx6jX9svrvsqKd7+mva1rjq3m0qh/UJWUuU8zmtfMTc/+P8fbY2PzWrFXcoiguAZq1O2zLmheqWd/qJpzO5heVvI3B6v66KUlkAIRYeKRDuKnu9xS2Md2FaSZxvSTDLyLD/qlmlhaU5SJhqlBkEjJiUu1k9Y19vXFRzOSChWxmUSl2I0Tbvd0yFnKl6H20KTbVjtpmPZ+/1wcTovZ83WH09BG4GZmdlOgkJo/2YWfxIMIjYRGj97h66JC3rTyVfrJ1YqXIY7UTHSFqsf8w3Tn61jvz8uZixQpnBcaaWNv4XcU4OdZ/fTE2zswfp74E2mE4qV2u3WF4KH3I96ecAMCKdzTirMgNUFM/G5XV1o7aVA/x0eK3CZdwoGQ7cILjAY+7di28sVvWGn9b26tufHIKgRnXomsX743dYx+wlHakOwewedrQX33yQcMUJzj4zl3TLH83Pm754UHSNVCaWsMXTatc9WQJpoGA5LTEIeC6bu4Abo9jvz1WGpGTAMVF1l/CRkAg4XuRAMjwnGXZC0j1NqWIXSkiW8TDUoQAQWBqA4k9SVz78O3DmSLCEDtTJM5s76BZ4qTZ7lG3oWkQs044gGQxxYgs/lkw49zmHYIeVIwTaGn2Gkf5y0FEoymIX1yCABhkvwn9JR1knBZYGKcTwPW88wAn8PEP7POmO4jGntM3qP+358nA</source>
  </file>
  <file path="Client.php" generated-path="Client.html" hash="42d64c8464593e9da8c56f75370367e5" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Swoole" line="10" package="Default">
      <extends/>
      <name>Client</name>
      <full_name>\Swoole\Client</full_name>
      <docblock line="10">
        <description>swoole_client</description>
        <long-description>Author: EagleWu &lt;eaglewudi@gmail.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="10" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="Swoole" line="18" package="Default">
        <name>$errCode</name>
        <full_name>\Swoole\Client::errCode</full_name>
        <default></default>
        <docblock line="18">
          <description>函数执行错误会设置该变量</description>
          <long-description></long-description>
          <tag name="var" line="18" description="" type="" variable=""/>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="Swoole" line="32" package="Default">
        <name>$sock</name>
        <full_name>\Swoole\Client::sock</full_name>
        <default></default>
        <docblock line="32">
          <description>socket的文件描述符</description>
          <long-description>PHP代码中可以使用:
$sock = fopen("php://fd/".$swoole_client-&gt;sock);

将swoole_client的socket转换成一个stream socket。可以调用fread/fwrite/fclose等函数进程操作。
swoole_server中的$fd不能用此方法转换，因为$fd只是一个数字，$fd文件描述符属于主进程
$swoole_client-&gt;sock可以转换成int作为数组的key.</long-description>
          <tag name="var" line="32" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="41" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Client::__construct()</full_name>
        <docblock line="41">
          <description>swoole_client构造函数</description>
          <long-description></long-description>
          <tag name="param" line="41" description="&lt;p&gt;指定socket的类型，支持TCP/UDP、TCP6/UDP64种&lt;/p&gt;" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;SWOOLE_SOCK_SYNC/SWOOLE_SOCK_ASYNC  同步/异步&lt;/p&gt;" type="integer" variable="$sync_type">
            <type>integer</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;链接的编号，用于长连接复用&lt;/p&gt;" type="string" variable="$connectionKey">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sync_type</name>
          <default>SWOOLE_SOCK_SYNC</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$connectionKey</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="55" package="Default">
        <name>connect</name>
        <full_name>\Swoole\Client::connect()</full_name>
        <docblock line="55">
          <description>连接到远程服务器</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;是远程服务器的地址 v1.6.10+ 支持填写域名 Swoole会自动进行DNS查询&lt;/p&gt;" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;是远程服务器端口&lt;/p&gt;" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;是网络IO的超时，单位是s，支持浮点数。默认为0.1s，即100ms&lt;/p&gt;" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;参数在UDP类型时表示是否启用udp_connect。设定此选项后将绑定$host与$port，此UDP将会丢弃非指定host/port的数据包。&#10;在send/recv前必须使用swoole_client_select来检测是否完成了连接&lt;/p&gt;" type="integer" variable="$flag">
            <type>integer</type>
          </tag>
          <tag name="return" line="55" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.1</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="69" package="Default">
        <name>send</name>
        <full_name>\Swoole\Client::send()</full_name>
        <docblock line="69">
          <description>向远程服务器发送数据</description>
          <long-description>参数为字符串，支持二进制数据。
成功发送返回的已发数据长度
失败返回false，并设置$swoole_client-&gt;errCode</long-description>
          <tag name="param" line="69" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="79" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Client::sendto()</full_name>
        <docblock line="79">
          <description>向任意IP:PORT的服务器发送数据包，仅支持UDP/UDP6的client</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="" variable="$ip"/>
          <tag name="param" line="79" description="" type="" variable="$port"/>
          <tag name="param" line="79" description="" type="" variable="$data"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="95" package="Default">
        <name>recv</name>
        <full_name>\Swoole\Client::recv()</full_name>
        <docblock line="95">
          <description>从服务器端接收数据</description>
          <long-description>如果设定了$waitall就必须设定准确的$size，否则会一直等待，直到接收的数据长度达到$size
如果设置了错误的$size，会导致recv超时，返回 false
调用成功返回结果字符串，失败返回 false，并设置$swoole_client-&gt;errCode属性</long-description>
          <tag name="param" line="95" description="&lt;p&gt;接收数据的最大长度&lt;/p&gt;" type="integer" variable="$size">
            <type>integer</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;是否等待所有数据到达后返回&lt;/p&gt;" type="boolean" variable="$waitall">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$size</name>
          <default>65535</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$waitall</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="106" package="Default">
        <name>close</name>
        <full_name>\Swoole\Client::close()</full_name>
        <docblock line="106">
          <description>关闭远程连接</description>
          <long-description>swoole_client对象在析构时会自动close</long-description>
          <tag name="return" line="106" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="117" package="Default">
        <name>on</name>
        <full_name>\Swoole\Client::on()</full_name>
        <docblock line="117">
          <description>注册异步事件回调函数</description>
          <long-description></long-description>
          <tag name="param" line="117" description="" type="" variable="$event_name"/>
          <tag name="param" line="117" description="" type="" variable="$callback_function"/>
          <tag name="return" line="117" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="125" package="Default">
        <name>isConnected</name>
        <full_name>\Swoole\Client::isConnected()</full_name>
        <docblock line="125">
          <description>判断是否连接到服务器</description>
          <long-description></long-description>
          <tag name="return" line="125" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="133" package="Default">
        <name>getsockname</name>
        <full_name>\Swoole\Client::getsockname()</full_name>
        <docblock line="133">
          <description>获取客户端socket的host:port信息</description>
          <long-description></long-description>
          <tag name="return" line="133" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="142" package="Default">
        <name>getpeername</name>
        <full_name>\Swoole\Client::getpeername()</full_name>
        <docblock line="142">
          <description>获取远端socket的host:port信息，仅用于UDP/UDP6协议
UDP发送数据到服务器后，可能会由其他的Server进行回复</description>
          <long-description></long-description>
          <tag name="return" line="142" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="150" package="Default">
        <name>set</name>
        <full_name>\Swoole\Client::set()</full_name>
        <docblock line="150">
          <description>设置客户端参数</description>
          <long-description></long-description>
          <tag name="param" line="150" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="157" package="Default">
        <name>sleep</name>
        <full_name>\Swoole\Client::sleep()</full_name>
        <docblock line="157">
          <description>睡眠，停止接收数据</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Swoole" line="164" package="Default">
        <name>wakeup</name>
        <full_name>\Swoole\Client::wakeup()</full_name>
        <docblock line="164">
          <description>唤醒，开始接收数据</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
    <source>eJylV21PE1kU/s6vuDFN7LIsBXdlExRXgyZr3AhZ3Jj9RMb2FhtLp5mZQljXpCCv0tKyAoqUQrG8RG0LolAYSn+Mc+9MP+1f2HPntmUYasFsP8D0zr3nPOc5zzn39PovwcfBhoaA0I/loODGqGdQFP34WoOrsbEBNSLZ/Nrr9vtwQIEFtnYrpDwWpXZ0R+jz44chdB2zh8GQx3ezr1/w+ZvdYv8NtvG2oOB2dKWltc3VcsXV+jOsuRrcfkGWUSc3+LShAcHHdMY+jYhMFOj8Np3aNFKR0tyikctpR2+M7LFeyBq5dRJ7XZqIlfdWjtwcEKTys8v8Hww98vvcyIElqVP0QDB2J7LofoIV/c0oXZjQ1D0aixnFbf3Dhs1w96/dmvpWXx3W8hkSy2nqulYo6nNb7ZUNDmYIdSCvGMQB5yWgst3l8npcl5odp4j74Qbb+N01m32yPX5qGwDiyIzCBxpdo5NxLR/W8u9kRcJCfxn1l/AIx2JsPwcsXnjlcXkHJZ+CXV63X5SxnpniLBrFJX1rmr6MaoUEHKtGz33KWBrAEoQGbh1ej5aPGs8LYJFm0nThgO7OcxT/HkXI0qqWP4Q9JPaOvs5xUGCfZF7BW1i30Uh2ktrhjJZXOYATts5yUg6lEq8voABWcAbWdXUUkD3BQ8018o18TI41cs6M1ki41TNNjpbCq5wiu+mgIAHTYJxb6lWGghjRyATJvqmKRt9RSXIaIqdzORoZftDZ7frjdveXMHtqY49tP+mb0ZomhwJubrLnYVfXb3d6e7o67/X2/Hm/02VduMVWECLxCM2su8jRCPyzmQNJ+AJ9yOEWAwHsVnxi4B4eQqWXx3RmnUE8WiCxfYAI+YRUlOaLRjEJr0g6Ciu1iPOGAqYZ1NsLNsF8yK04TzhosoLvOAO/yY6kA12+/J1p/6n599mZlJQBTYJKE0yliSh5kSKLW7UzUon3sSgrCDRoOwQhk8Q2WQ6jgdbmtubWlu8RTw5JvSfji2RlhcSj5d7G+snEO/JiC9QJTeb2/R66sm7k1molLChKNd29z5HYW9sBr18U4Iji68diyDylF2Z1NXG3C9AZe2P01R6rpei8VojCS7kqIPo5q48cgBihRkvqayObhgJoaW6Vze27rS0t/XItcF6/0IdIbIRVYmILdMeFCX6M1JaePgQnJL5B4jlIecgT7C1nCLxAPwVBQ6GXwlOl1AGJz0Ar0tVZWDQZ1vIzZugMYiYNluE10Kbl18jR89JykhcE2+li21gjhZ4dzZLImKXPACgZBzwuCbsHyFSUFMdKKZV30FP1CJ3ID7jo8jp9G6afp8u4sxHWAA/HuVCqBEhYCUkB9AgM1NVxOVqnGVATT2XTSXo6EDDcVCYRvtQXK4nP2iRAYrOl8DAP297WzZRADqE/QjfU8h+rqdYOI6A6MrnHD1rIgljJixVu1SjOkaUk0/T+R1jhe6GGyeFG1Ud6x/i0zjd6Bb+MmVYO9vhFaW+05XuwfmV5BEX4ZpJZfp3m0XP501SVjsbudrd3d/3+gCmmFpMgIAhEU8c4XaA8s5/C9soEcgq7wxe0r7A029csofEwTuFXRCfYOVGINZqvhKOpM9ZeAPKkc3u1tbAxQpMJXm+gZceg4FMEv59s7/By4G/IxLieyrJ7WPb9ZaYS9D+5aJZcWF/6xG70Y8YMPEPH5P6qVceVYRwfwyvTwBnnoAlwzscpixewT3JHxsQnVqHVDsVFhUxVVZu1OWtwjZbVqb4E21aFWyWJLqpJGBVoeLPeLQxQkZVgUzphkt48XRDlM0yxqMIy4p2Es0enwjQxVZYZ3DpAV3yGo7XLnpdEXeEzxpwcXAdqu3r1x6tNJ247ePjnlMTYbulVhneVUy2u5sxCcgfGTgo6Kk3GYX6BTFWvMXPmszN44S7JDjvrI6W7W2Q8wscQ7XAaJj3gDBRRb4Jy4AHW2dnvCvsbN1D0SIC5ogLim0GLAafFflMNk+dQPwkTboaLozqG2AeQi8PxyZ38rsGec5g0ZvZJbIFkYdTdh75RnSjZFdXO2o9WTNHhXC0E6G8kSJIwVBdJH1aYTcbKhZAw9X0dBu/EfIKsdGISjRnZSpNDbDKwdm8Li1BcrPxjOfhRAVLV53bI2J6mLoCbHvOHB5++QEkwk/6fgIMYSxcJ2OxCVer5HW2TpukPWg5WFHv9W24MxXl6X32/+nJKT6wyKoYTNLNW46qwO/BjHDwnGDKXLo3/w4wehcnm9PlGB4UnOGS3+uw/6EDkBA==</source>
  </file>
  <file path="Functionals.php" generated-path="Functionals.html" hash="a2c7d43e7d1740849f6327607581b645" package="Default">
    <docblock line="0">
      <description>Swoole Develop Structure</description>
      <long-description>Swoole 结构，便于开发过程中查看文档，以及屏蔽IDE undefined 提示，便于快速查看函数用法。

本文件使用方式

普通IDE：
开发Swoole项目同时，在IDE中打开/导入本文件即可。
如果IDE自带 Include Path 功能(如：PhpStorm)，设置该文件路径即可。

PhpStorm 另一种方法:
WinRAR打开 &lt;Phpstorm_Dir&gt;/plugins/php/lib/php.jar 文件
复制 swoole.php 到路径：com\jetbrains\php\lang\psi\stubs\data\
保存文件，重启Phpstorm.

PS:替换前请备份php.jar 若发生错误便于恢复 :)

Author:EagleWu &lt;eaglewudi@gmail.com&gt;
Date: 2014/01/17</long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <function namespace="" line="32" package="Default">
      <name>swoole_server_set</name>
      <full_name>\swoole_server_set()</full_name>
      <docblock line="32">
        <description>swoole_server_set函数用于设置swoole_server运行时的各项参数</description>
        <long-description></long-description>
        <tag name="package" line="32" description="Default"/>
        <tag name="param" line="32" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="32" description="" type="" variable="$arguments"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$arguments</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="45" package="Default">
      <name>swoole_server_create</name>
      <full_name>\swoole_server_create()</full_name>
      <docblock line="45">
        <description>创建一个swoole server资源对象</description>
        <long-description></long-description>
        <tag name="package" line="45" description="Default"/>
        <tag name="param" line="45" description="&lt;p&gt;参数用来指定监听的ip地址，如127.0.0.1，或者外网地址，或者0.0.0.0监听全部地址&lt;/p&gt;" type="string" variable="$host">
          <type>string</type>
        </tag>
        <tag name="param" line="45" description="&lt;p&gt;监听的端口，如9501，监听小于1024端口需要root权限，如果此端口被占用server-start时会失败&lt;/p&gt;" type="integer" variable="$port">
          <type>integer</type>
        </tag>
        <tag name="param" line="45" description="&lt;p&gt;运行的模式，swoole提供了3种运行模式，默认为多进程模式&lt;/p&gt;" type="integer" variable="$mode">
          <type>integer</type>
        </tag>
        <tag name="param" line="45" description="&lt;p&gt;指定socket的类型，支持TCP/UDP、TCP6/UDP64种&lt;/p&gt;" type="integer" variable="$sock_type">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$host</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$port</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$mode</name>
        <default>SWOOLE_PROCESS</default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$sock_type</name>
        <default>SWOOLE_SOCK_TCP</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="61" package="Default">
      <name>swoole_server_addlisten</name>
      <full_name>\swoole_server_addlisten()</full_name>
      <docblock line="61">
        <description>增加监听的端口</description>
        <long-description>您可以混合使用UDP/TCP，同时监听内网和外网端口
业务代码中可以通过调用swoole_connection_info来获取某个连接来自于哪个端口</long-description>
        <tag name="package" line="61" description="Default"/>
        <tag name="param" line="61" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="61" description="" type="string" variable="$host">
          <type>string</type>
        </tag>
        <tag name="param" line="61" description="" type="integer" variable="$port">
          <type>integer</type>
        </tag>
        <tag name="return" line="61" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$host</name>
        <default>'127.0.0.1'</default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$port</name>
        <default>9502</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="81" package="Default">
      <name>swoole_server_addtimer</name>
      <full_name>\swoole_server_addtimer()</full_name>
      <docblock line="81">
        <description>设置定时器</description>
        <long-description>第二个参数是定时器的间隔时间，单位为毫秒。
swoole定时器的最小颗粒是1毫秒，支持多个定时器。
此函数可以用于worker进程中。或者通过swoole_server_set设置timer_interval来调整定时器最小间隔。

增加定时器后需要为Server设置onTimer回调函数，否则会造成严重错误。
多个定时器都会回调此函数。
在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。</long-description>
        <tag name="package" line="81" description="Default"/>
        <tag name="param" line="81" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="81" description="" type="integer" variable="$interval">
          <type>integer</type>
        </tag>
        <tag name="return" line="81" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$interval</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="103" package="Default">
      <name>swoole_server_handler</name>
      <full_name>\swoole_server_handler()</full_name>
      <docblock line="103">
        <description>设置Server的事件回调函数</description>
        <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。

设置成功后返回true。如果$event_name填写错误将返回false。

onConnect/onClose/onReceive 这3个回调函数必须设置，其他事件回调函数可选。
如果设定了timer定时器，onTimer事件回调函数也必须设置</long-description>
        <tag name="package" line="103" description="Default"/>
        <tag name="param" line="103" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="103" description="" type="string" variable="$event_name">
          <type>string</type>
        </tag>
        <tag name="param" line="103" description="" type="callable" variable="$event_callback_function">
          <type>callable</type>
        </tag>
        <tag name="return" line="103" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$event_name</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$event_callback_function</name>
        <default></default>
        <type>callable</type>
      </argument>
    </function>
    <function namespace="" line="130" package="Default">
      <name>swoole_server_start</name>
      <full_name>\swoole_server_start()</full_name>
      <docblock line="130">
        <description>启动server，监听所有TCP/UDP端口</description>
        <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+n*Worker进程。
启动失败扩展内会抛出致命错误，请检查php error_log的相关信息。errno={number}是标准的Linux Errno，可参考相关文档。
如果开启了log_file设置，信息会打印到指定的Log文件中。

如果想要在开机启动时，自动运行你的Server，可以在/etc/rc.local文件中加入:

/usr/bin/php /data/webroot/www.swoole.com/server.php

常见的错误有及拍错方法：

1、bind端口失败,原因是其他进程已占用了此端口
2、未设置必选回调函数，启动失败
3、php有代码致命错误，请检查php的错误信息
4、执行ulimit -c unlimited，打开core dump，查看是否有段错误
5、关闭daemonize，关闭log，使错误信息可以打印到屏幕</long-description>
        <tag name="package" line="130" description="Default"/>
        <tag name="param" line="130" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="return" line="130" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
    </function>
    <function namespace="" line="150" package="Default">
      <name>swoole_server_reload</name>
      <full_name>\swoole_server_reload()</full_name>
      <docblock line="150">
        <description>平滑重启Server</description>
        <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。
这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。
会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

SIGTREM: 向主进程发送此信号服务器将安全终止
SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程，在PHP代码中可以调用swoole_server_reload($serv)完成此操作</long-description>
        <tag name="package" line="150" description="Default"/>
        <tag name="param" line="150" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="return" line="150" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
    </function>
    <function namespace="" line="166" package="Default">
      <name>swoole_server_close</name>
      <full_name>\swoole_server_close()</full_name>
      <docblock line="166">
        <description>关闭客户端连接</description>
        <long-description>Server主动close连接，也一样会触发onClose事件。
不要在close之后写清理逻辑，应当放置到onClose回调中处理。</long-description>
        <tag name="package" line="166" description="Default"/>
        <tag name="param" line="166" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="166" description="" type="integer" variable="$fd">
          <type>integer</type>
        </tag>
        <tag name="param" line="166" description="" type="integer" variable="$from_id">
          <type>integer</type>
        </tag>
        <tag name="return" line="166" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$fd</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$from_id</name>
        <default>0</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="184" package="Default">
      <name>swoole_server_send</name>
      <full_name>\swoole_server_send()</full_name>
      <docblock line="184">
        <description>向客户端发送数据</description>
        <long-description>$data的长度可以是任意的。扩展函数内会进行切分。
如果是UDP协议，会直接在worker进程内发送数据包。
发送成功会返回true，如果连接已被关闭或发送失败会返回false.</long-description>
        <tag name="package" line="184" description="Default"/>
        <tag name="param" line="184" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="184" description="" type="integer" variable="$fd">
          <type>integer</type>
        </tag>
        <tag name="param" line="184" description="" type="string" variable="$data">
          <type>string</type>
        </tag>
        <tag name="param" line="184" description="" type="integer" variable="$from_id">
          <type>integer</type>
        </tag>
        <tag name="return" line="184" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$fd</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$data</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$from_id</name>
        <default>0</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="207" package="Default">
      <name>swoole_connection_info</name>
      <full_name>\swoole_connection_info()</full_name>
      <docblock line="207">
        <description>获取客户端连接的信息</description>
        <long-description>返回数组含义:
from_id 来自哪个poll线程
from_fd 来自哪个server socket
from_port 来自哪个Server端口
remote_port 客户端连接的端口
remote_ip 客户端连接的ip

以下 v1.6.10 增加
connect_time 连接时间
last_time 最后一次发送数据的时间</long-description>
        <tag name="package" line="207" description="Default"/>
        <tag name="param" line="207" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="207" description="" type="integer" variable="$fd">
          <type>integer</type>
        </tag>
        <tag name="return" line="207" description="on success or false on failure." type="array">
          <type>array</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$fd</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="224" package="Default">
      <name>swoole_connection_list</name>
      <full_name>\swoole_connection_list()</full_name>
      <docblock line="224">
        <description>遍历当前Server所有的客户端连接</description>
        <long-description>此函数接受3个参数，第一个参数是server的资源对象，第二个参数是起始fd，第三个参数是每页取多少条，最大不得超过100。
调用成功将返回一个数字索引数组，元素是取到的$fd。
数组会按从小到大排序，最后一个$fd作为新的start_fd再次尝试获取。</long-description>
        <tag name="package" line="224" description="Default"/>
        <tag name="param" line="224" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="224" description="" type="integer" variable="$start_fd">
          <type>integer</type>
        </tag>
        <tag name="param" line="224" description="" type="integer" variable="$pagesize">
          <type>integer</type>
        </tag>
        <tag name="return" line="224" description="on success or false on failure" type="array">
          <type>array</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$start_fd</name>
        <default>0</default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$pagesize</name>
        <default>10</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="239" package="Default">
      <name>swoole_set_process_name</name>
      <full_name>\swoole_set_process_name()</full_name>
      <docblock line="239">
        <description>设置进程的名称</description>
        <long-description>修改进程名称后，通过ps命令看到的将不再是php your_file.php。而是设定的字符串。
此函数接受一个字符串参数。
此函数与PHP5.5提供的cli_set_process_title功能是相同的，但swoole_set_process_name可用于PHP5.2之上的任意版本。</long-description>
        <tag name="package" line="239" description="Default"/>
        <tag name="param" line="239" description="" type="string" variable="$name">
          <type>string</type>
        </tag>
        <tag name="return" line="239" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$name</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="263" package="Default">
      <name>swoole_event_add</name>
      <full_name>\swoole_event_add()</full_name>
      <docblock line="263">
        <description>将Socket加入到swoole的reactor事件监听中</description>
        <long-description>此函数可以用在Server或Client模式下

参数1为socket的文件描述符；
参数2为回调函数，可以是字符串函数名、对象+方法、类静态方法或匿名函数，当此socket可读是回调制定的函数。

Server程序中会增加到server socket的reactor中。
Client程序中，如果是第一次调用此函数会自动创建一个reactor，并添加此socket，程序将在此处进行wait。
swoole_event_add函数之后的代码不会执行。当调用swoole_event_exit才会停止wait，程序继续向下执行。
第二次调用只增加此socket到reactor中，开始监听事件</long-description>
        <tag name="package" line="263" description="Default"/>
        <tag name="param" line="263" description="" type="integer" variable="$sock">
          <type>integer</type>
        </tag>
        <tag name="param" line="263" description="" type="\\is_callable" variable="$callback">
          <type>\\is_callable</type>
        </tag>
        <tag name="param" line="263" description="" type="" variable="$write_callback"/>
        <tag name="param" line="263" description="" type="" variable="$flag"/>
        <tag name="return" line="263" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$sock</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$read_callback</name>
        <default>NULL</default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$write_callback</name>
        <default>NULL</default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$flag</name>
        <default>NULL</default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="276" package="Default">
      <name>swoole_event_set</name>
      <full_name>\swoole_event_set()</full_name>
      <docblock line="276">
        <description>修改socket的事件设置
可以修改可读/可写事件的回调设置和监听的事件类型</description>
        <long-description></long-description>
        <tag name="package" line="276" description="Default"/>
        <tag name="param" line="276" description="" type="" variable="$sock"/>
        <tag name="param" line="276" description="" type="" variable="$read_callback"/>
        <tag name="param" line="276" description="" type="null" variable="$write_callback">
          <type>null</type>
        </tag>
        <tag name="param" line="276" description="" type="null" variable="$flag">
          <type>null</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$sock</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$read_callback</name>
        <default>NULL</default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$write_callback</name>
        <default>NULL</default>
        <type>null</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$flag</name>
        <default>NULL</default>
        <type>null</type>
      </argument>
    </function>
    <function namespace="" line="288" package="Default">
      <name>swoole_event_del</name>
      <full_name>\swoole_event_del()</full_name>
      <docblock line="288">
        <description>从reactor中移除监听的Socket</description>
        <long-description>swoole_event_del应当与 swoole_event_add 成对使用</long-description>
        <tag name="package" line="288" description="Default"/>
        <tag name="param" line="288" description="" type="integer" variable="$sock">
          <type>integer</type>
        </tag>
        <tag name="return" line="288" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$sock</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="298" package="Default">
      <name>swoole_event_exit</name>
      <full_name>\swoole_event_exit()</full_name>
      <docblock line="298">
        <description>退出事件轮询</description>
        <long-description></long-description>
        <tag name="package" line="298" description="Default"/>
        <tag name="return" line="298" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="307" package="Default">
      <name>swoole_event_write</name>
      <full_name>\swoole_event_write()</full_name>
      <docblock line="307">
        <description>异步写</description>
        <long-description></long-description>
        <tag name="package" line="307" description="Default"/>
        <tag name="param" line="307" description="" type="mixed" variable="$socket">
          <type>mixed</type>
        </tag>
        <tag name="param" line="307" description="" type="string" variable="$data">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$socket</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$data</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="322" package="Default">
      <name>swoole_get_mysqli_sock</name>
      <full_name>\swoole_get_mysqli_sock()</full_name>
      <docblock line="322">
        <description>获取MySQLi的socket文件描述符</description>
        <long-description>可将mysql的socket增加到swoole中，执行异步MySQL查询。
如果想要使用异步MySQL，需要在编译swoole时制定--enable-async-mysql
swoole_get_mysqli_sock仅支持mysqlnd驱动，php5.4以下版本不支持此特性</long-description>
        <tag name="package" line="322" description="Default"/>
        <tag name="param" line="322" description="" type="\mysqli" variable="$db">
          <type>\mysqli</type>
        </tag>
        <tag name="return" line="322" description="" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$db</name>
        <default></default>
        <type>\mysqli</type>
      </argument>
    </function>
    <function namespace="" line="331" package="Default">
      <name>swoole_mysql_query</name>
      <full_name>\swoole_mysql_query()</full_name>
      <docblock line="331">
        <description>异步执行SQL</description>
        <long-description></long-description>
        <tag name="package" line="331" description="Default"/>
        <tag name="param" line="331" description="" type="" variable="$db"/>
        <tag name="param" line="331" description="" type="" variable="$sql"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$db</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$sql</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="359" package="Default">
      <name>swoole_server_task</name>
      <full_name>\swoole_server_task()</full_name>
      <docblock line="359">
        <description>投递异步任务到task_worker池中</description>
        <long-description>此函数会立即返回，worker进程可以继续处理新的请求。
此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。
当任务完成时，在task_worker中调用swoole_server_finish($serv, "finish");
告诉worker进程此任务已完成。当然swoole_server_finish是可选的。

发送的$data必须为字符串，如果是数组或对象，请在业务代码中进行serialize处理，并在onTask/onFinish中进行unserialize。
$data可以为二进制数据，最大长度为8K。字符串可以使用gzip进行压缩。

使用swoole_server_task必须为Server设置onTask和onFinish回调，
否则swoole_server_start会失败。此回调函数会在task_worker进程中被调用。

函数会返回一个$task_id数字，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数。

task_worker的数量在swoole_server_set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务。
swoole_server_task和swoole_server_finish可发送$data的长度最大不得超过8K，此参数受SW_BUFFER_SIZE宏控制。</long-description>
        <tag name="package" line="359" description="Default"/>
        <tag name="param" line="359" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="359" description="" type="string" variable="$data">
          <type>string</type>
        </tag>
        <tag name="return" line="359" description="$task_id" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$data</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="375" package="Default">
      <name>swoole_server_finish</name>
      <full_name>\swoole_server_finish()</full_name>
      <docblock line="375">
        <description>task_worker进程中通知worker进程，投递的任务已完成</description>
        <long-description>此函数可以传递结果数据给worker进程
使用swoole_server_finish函数必须为Server设置onFinish回调函数。此函数只可用于task_worker进程的onTask回调中
swoole_server_finish是可选的。如果worker进程不关心任务执行的结果，可以不调用此函数</long-description>
        <tag name="package" line="375" description="Default"/>
        <tag name="param" line="375" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="375" description="" type="string" variable="$response">
          <type>string</type>
        </tag>
        <tag name="return" line="375" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$response</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="390" package="Default">
      <name>swoole_server_deltimer</name>
      <full_name>\swoole_server_deltimer()</full_name>
      <docblock line="390">
        <description>删除定时器</description>
        <long-description>$interval 参数为定时器的间隔时间
根据定时器时间区分不同的定时器</long-description>
        <tag name="package" line="390" description="Default"/>
        <tag name="param" line="390" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="param" line="390" description="" type="integer" variable="$interval">
          <type>integer</type>
        </tag>
        <tag name="return" line="390" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$interval</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="403" package="Default">
      <name>swoole_server_shutdown</name>
      <full_name>\swoole_server_shutdown()</full_name>
      <docblock line="403">
        <description>关闭服务器</description>
        <long-description>此函数可以用在worker进程内。</long-description>
        <tag name="package" line="403" description="Default"/>
        <tag name="param" line="403" description="" type="\swoole_server" variable="$serv">
          <type>\swoole_server</type>
        </tag>
        <tag name="return" line="403" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$serv</name>
        <default></default>
        <type>\swoole_server</type>
      </argument>
    </function>
    <function namespace="" line="421" package="Default">
      <name>swoole_server_taskwait</name>
      <full_name>\swoole_server_taskwait()</full_name>
      <docblock line="421">
        <description>投递堵塞任务到task进程池</description>
        <long-description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回。
$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请不要使用它</long-description>
        <tag name="package" line="421" description="Default"/>
        <tag name="param" line="421" description="" type="string" variable="$task_data">
          <type>string</type>
        </tag>
        <tag name="param" line="421" description="" type="float" variable="$timeout">
          <type>float</type>
        </tag>
        <tag name="return" line="421" description="" type="string">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$task_data</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$timeout</name>
        <default>0.5</default>
        <type>float</type>
      </argument>
    </function>
    <function namespace="" line="435" package="Default">
      <name>swoole_event_wait</name>
      <full_name>\swoole_event_wait()</full_name>
      <docblock line="435">
        <description>进行事件轮询</description>
        <long-description>PHP5.4之前的版本没有在ZendAPI中加入注册shutdown函数。所以swoole无法在脚本结尾处自动进行事件轮询。
低于5.4的版本，需要在你的PHP脚本结尾处加swoole_event_wait函数，使脚本开始进行事件轮询。

5.4或更高版本不需要加此函数。</long-description>
        <tag name="package" line="435" description="Default"/>
        <tag name="return" line="435" description="" type="void">
          <type>void</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="446" package="Default">
      <name>swoole_timer_add</name>
      <full_name>\swoole_timer_add()</full_name>
      <docblock line="446">
        <description>添加定时器，可用于客户端环境和fpm中</description>
        <long-description></long-description>
        <tag name="package" line="446" description="Default"/>
        <tag name="param" line="446" description="" type="" variable="$interval"/>
        <tag name="param" line="446" description="" type="" variable="$callback"/>
        <tag name="return" line="446" description="" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$interval</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="457" package="Default">
      <name>swoole_timer_after</name>
      <full_name>\swoole_timer_after()</full_name>
      <docblock line="457">
        <description>单次定时器，在N毫秒后执行回调函数</description>
        <long-description></long-description>
        <tag name="package" line="457" description="Default"/>
        <tag name="param" line="457" description="" type="" variable="$ms"/>
        <tag name="param" line="457" description="&lt;p&gt;function ($user_param)｛｝&lt;/p&gt;" type="" variable="$callback"/>
        <tag name="param" line="457" description="" type="" variable="$user_param"/>
        <tag name="return" line="457" description="" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$ms</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$user_param</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="466" package="Default">
      <name>swoole_timer_del</name>
      <full_name>\swoole_timer_del()</full_name>
      <docblock line="466">
        <description>删除定时器</description>
        <long-description></long-description>
        <tag name="package" line="466" description="Default"/>
        <tag name="param" line="466" description="" type="" variable="$interval"/>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$interval</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="475" package="Default">
      <name>swoole_timer_clear</name>
      <full_name>\swoole_timer_clear()</full_name>
      <docblock line="475">
        <description>删除定时器</description>
        <long-description></long-description>
        <tag name="package" line="475" description="Default"/>
        <tag name="param" line="475" description="" type="" variable="$timer_id"/>
        <tag name="return" line="475" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$timer_id</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="" line="486" package="Default">
      <name>swoole_timer_tick</name>
      <full_name>\swoole_timer_tick()</full_name>
      <docblock line="486">
        <description>添加TICK定时器</description>
        <long-description></long-description>
        <tag name="package" line="486" description="Default"/>
        <tag name="param" line="486" description="" type="" variable="$ms"/>
        <tag name="param" line="486" description="&lt;p&gt;function($timmerID, $params){}&lt;/p&gt;" type="" variable="$callback"/>
        <tag name="param" line="486" description="" type="null" variable="$params">
          <type>null</type>
        </tag>
        <tag name="return" line="486" description="" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$ms</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type/>
      </argument>
      <argument line="0" by_reference="false">
        <name>$params</name>
        <default>null</default>
        <type>null</type>
      </argument>
    </function>
    <function namespace="" line="496" package="Default">
      <name>swoole_version</name>
      <full_name>\swoole_version()</full_name>
      <docblock line="496">
        <description>获取swoole扩展的版本号，如1.6.10</description>
        <long-description></long-description>
        <tag name="package" line="496" description="Default"/>
        <tag name="return" line="496" description="" type="string">
          <type>string</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="505" package="Default">
      <name>swoole_strerror</name>
      <full_name>\swoole_strerror()</full_name>
      <docblock line="505">
        <description>将标准的Unix Errno错误码转换成错误信息</description>
        <long-description></long-description>
        <tag name="package" line="505" description="Default"/>
        <tag name="param" line="505" description="" type="integer" variable="$errno">
          <type>integer</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$errno</name>
        <default></default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="514" package="Default">
      <name>swoole_errno</name>
      <full_name>\swoole_errno()</full_name>
      <docblock line="514">
        <description>获取最近一次系统调用的错误码，等同于C/C++的errno变量。</description>
        <long-description></long-description>
        <tag name="package" line="514" description="Default"/>
        <tag name="return" line="514" description="" type="integer">
          <type>integer</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="527" package="Default">
      <name>swoole_get_local_ip</name>
      <full_name>\swoole_get_local_ip()</full_name>
      <docblock line="527">
        <description>此函数用于获取本机所有网络接口的IP地址，
目前只返回IPv4地址，返回结果会过滤掉本地loop地址127.0.0.1。
结果数组是以interface名称为key的关联数组。
比如 array("eth0" =&gt; "192.168.1.100")</description>
        <long-description></long-description>
        <tag name="package" line="527" description="Default"/>
        <tag name="return" line="527" description="" type="array">
          <type>array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="" line="544" package="Default">
      <name>swoole_async_readfile</name>
      <full_name>\swoole_async_readfile()</full_name>
      <docblock line="544">
        <description>异步读取文件内容
此函数调用后会马上返回，当文件读取完毕时会回调制定的callback函数。
callback( $filename, $content )</description>
        <long-description>swoole_async_readfile会将文件内容全部复制到内存，所以不能用于大文件的读取
如果要读取超大文件，请使用swoole_async_read函数
swoole_async_readfile最大可读取4M的文件，受限于SW_AIO_MAX_FILESIZE宏</long-description>
        <tag name="package" line="544" description="Default"/>
        <tag name="param" line="544" description="" type="string" variable="$filename">
          <type>string</type>
        </tag>
        <tag name="param" line="544" description="" type="mixed" variable="$callback">
          <type>mixed</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$filename</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="559" package="Default">
      <name>swoole_async_writefile</name>
      <full_name>\swoole_async_writefile()</full_name>
      <docblock line="559">
        <description>异步写文件，调用此函数后会立即返回, 当写入完成时会自动回调指定的callback函数
callback($filename)</description>
        <long-description>swoole_async_writefile最大可写入4M的文件
swoole_async_writefile可以不指定回调函数</long-description>
        <tag name="package" line="559" description="Default"/>
        <tag name="param" line="559" description="" type="string" variable="$filename">
          <type>string</type>
        </tag>
        <tag name="param" line="559" description="" type="string" variable="$content">
          <type>string</type>
        </tag>
        <tag name="param" line="559" description="" type="callback" variable="$callback">
          <type>callback</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$filename</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$content</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type>callback</type>
      </argument>
    </function>
    <function namespace="" line="580" package="Default">
      <name>swoole_async_read</name>
      <full_name>\swoole_async_read()</full_name>
      <docblock line="580">
        <description>异步读文件</description>
        <long-description>使用此函数读取文件是非阻塞的，当读操作完成时会自动回调制定的函数
此函数与swoole_async_readfile不同，它是分段读取，可以用于读取超大文件。
每次只读 $trunk_size 个字节，不会占用太多内存

callback($filename, $content)
callback函数，可以通过return true/false，来控制是否继续读下一个trunk
return true，继续读取
return false，停止读取并关闭文件</long-description>
        <tag name="package" line="580" description="Default"/>
        <tag name="param" line="580" description="" type="string" variable="$filename">
          <type>string</type>
        </tag>
        <tag name="param" line="580" description="" type="mixed" variable="$callback">
          <type>mixed</type>
        </tag>
        <tag name="param" line="580" description="" type="integer" variable="$trunk_size">
          <type>integer</type>
        </tag>
        <tag name="return" line="580" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$filename</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type>mixed</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$trunk_size</name>
        <default>8192</default>
        <type>integer</type>
      </argument>
    </function>
    <function namespace="" line="588" package="Default">
      <name>swoole_async_set</name>
      <full_name>\swoole_async_set()</full_name>
      <docblock line="588">
        <description>设置异步相关的参数</description>
        <long-description></long-description>
        <tag name="package" line="588" description="Default"/>
        <tag name="param" line="588" description="" type="array" variable="$setting">
          <type>array</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$setting</name>
        <default></default>
        <type>array</type>
      </argument>
    </function>
    <function namespace="" line="609" package="Default">
      <name>swoole_async_write</name>
      <full_name>\swoole_async_write()</full_name>
      <docblock line="609">
        <description>异步写文件</description>
        <long-description>与swoole_async_writefile不同，write是分段读写的。
不需要一次性将要写的内容放到内存里，所以只占用少量内存。
swoole_async_write通过传入的offset参数来确定写入的位置

callback($filename)</long-description>
        <tag name="package" line="609" description="Default"/>
        <tag name="param" line="609" description="" type="string" variable="$filename">
          <type>string</type>
        </tag>
        <tag name="param" line="609" description="" type="string" variable="$content">
          <type>string</type>
        </tag>
        <tag name="param" line="609" description="" type="integer" variable="$offset">
          <type>integer</type>
        </tag>
        <tag name="param" line="609" description="" type="mixed" variable="$callback">
          <type>mixed</type>
        </tag>
        <tag name="return" line="609" description="" type="boolean">
          <type>boolean</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$filename</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$content</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$offset</name>
        <default></default>
        <type>integer</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default>NULL</default>
        <type>mixed</type>
      </argument>
    </function>
    <function namespace="" line="622" package="Default">
      <name>swoole_async_dns_lookup</name>
      <full_name>\swoole_async_dns_lookup()</full_name>
      <docblock line="622">
        <description>将域名解析为IP地址
调用此函数会立即返回，当DNS查询完成时，自动回调指定的callback函数</description>
        <long-description>callback($host, $ip)</long-description>
        <tag name="package" line="622" description="Default"/>
        <tag name="param" line="622" description="" type="string" variable="$domain">
          <type>string</type>
        </tag>
        <tag name="param" line="622" description="" type="callback" variable="$callback">
          <type>callback</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$domain</name>
        <default></default>
        <type>string</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$callback</name>
        <default></default>
        <type>callback</type>
      </argument>
    </function>
    <function namespace="" line="648" package="Default">
      <name>swoole_client_select</name>
      <full_name>\swoole_client_select()</full_name>
      <docblock line="648">
        <description>IO事件循环</description>
        <long-description>swoole_client的并行处理中用了select来做IO事件循环。为什么要用select呢？
因为client一般不会有太多连接，而且大部分socket会很快接收到响应数据。
在少量连接的情况下select比epoll性能更好，另外select更简单。

$read,$write,$error分别是可读/可写/错误的文件描述符。
这3个参数必须是数组变量的引用。数组的元素必须为swoole_client对象。
$timeout参数是select的超时时间，单位为秒，接受浮点数。

调用成功后，会返回事件的数量，并修改$read/$write/$error数组。
使用foreach遍历数组，然后执行$item-&gt;recv/$item-&gt;send来收发数据。
或者调用$item-&gt;close()或unset($item)来关闭socket。</long-description>
        <tag name="package" line="648" description="Default"/>
        <tag name="param" line="648" description="&lt;p&gt;可读&lt;/p&gt;" type="array" variable="$read">
          <type>array</type>
        </tag>
        <tag name="param" line="648" description="&lt;p&gt;可写&lt;/p&gt;" type="array" variable="$write">
          <type>array</type>
        </tag>
        <tag name="param" line="648" description="&lt;p&gt;错误&lt;/p&gt;" type="array" variable="$error">
          <type>array</type>
        </tag>
        <tag name="param" line="648" description="" type="float" variable="$timeout">
          <type>float</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="true">
        <name>$read</name>
        <default></default>
        <type>array</type>
      </argument>
      <argument line="0" by_reference="true">
        <name>$write</name>
        <default></default>
        <type>array</type>
      </argument>
      <argument line="0" by_reference="true">
        <name>$error</name>
        <default></default>
        <type>array</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$timeout</name>
        <default></default>
        <type>float</type>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="" line="653" package="Default">
      <extends>\Swoole\Http\Client</extends>
      <name>swoole_http_client</name>
      <full_name>\swoole_http_client</full_name>
      <docblock line="653">
        <description>swoole_http_client</description>
        <long-description>Author: EagleWu &lt;eaglewudi@gmail.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="653" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Http\Client" refers="\Swoole\Http\Client" link="/classes/Swoole.Http.Client.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="14" package="Default">
        <name>$setting</name>
        <full_name>\Swoole\Http\Client::setting</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="16" package="Default">
        <name>$set_headers</name>
        <full_name>\Swoole\Http\Client::set_headers</full_name>
        <default></default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="23" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Http\Client::__construct()</full_name>
        <docblock line="23">
          <description>swoole_http_client constructor.</description>
          <long-description></long-description>
          <tag name="param" line="23" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="23" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="32" package="Default">
        <name>set</name>
        <full_name>\Swoole\Http\Client::set()</full_name>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="32" description="" type="" variable="$setting"/>
          <tag name="return" line="32" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="40" package="Default">
        <name>setHeaders</name>
        <full_name>\Swoole\Http\Client::setHeaders()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="" variable="$headers"/>
          <tag name="return" line="40" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headers</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="49" package="Default">
        <name>setData</name>
        <full_name>\Swoole\Http\Client::setData()</full_name>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$data"/>
          <tag name="return" line="49" description="" type="true">
            <type>true</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="59" package="Default">
        <name>execute</name>
        <full_name>\Swoole\Http\Client::execute()</full_name>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="59" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="69" package="Default">
        <name>push</name>
        <full_name>\Swoole\Http\Client::push()</full_name>
        <docblock line="69">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="" variable="$data"/>
          <tag name="param" line="69" description="" type="integer" variable="$opcode">
            <type>integer</type>
          </tag>
          <tag name="param" line="69" description="" type="integer" variable="$fin">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$opcode</name>
          <default>WEBSOCKET_OPCODE_TEXT</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fin</name>
          <default>1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Default">
        <name>isConnected</name>
        <full_name>\Swoole\Http\Client::isConnected()</full_name>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="85" package="Default">
        <name>close</name>
        <full_name>\Swoole\Http\Client::close()</full_name>
        <docblock line="85">
          <description></description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="94" package="Default">
        <name>on</name>
        <full_name>\Swoole\Http\Client::on()</full_name>
        <docblock line="94">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="94" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="103" package="Default">
        <name>get</name>
        <full_name>\Swoole\Http\Client::get()</full_name>
        <docblock line="103">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="103" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="103" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="113" package="Default">
        <name>post</name>
        <full_name>\Swoole\Http\Client::post()</full_name>
        <docblock line="113">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="113" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="113" description="" type="mixed" variable="$post">
            <type>mixed</type>
          </tag>
          <tag name="param" line="113" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$post</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="122" package="Default">
        <name>upgrade</name>
        <full_name>\Swoole\Http\Client::upgrade()</full_name>
        <docblock line="122">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="122" description="" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="" type="mixed" variable="$finish">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="127" package="Default">
        <name>__destruct</name>
        <full_name>\Swoole\Http\Client::__destruct()</full_name>
        <docblock line="127">
          <description></description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Http\Client</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="658" package="Default">
      <extends>\Swoole\Http\Request</extends>
      <name>swoole_http_request</name>
      <full_name>\swoole_http_request</full_name>
      <docblock line="658">
        <description>Http请求对象
Class swoole_http_request</description>
        <long-description></long-description>
        <tag name="package" line="658" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Http\Request" refers="\Swoole\Http\Request" link="/classes/Swoole.Http.Request.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="10" package="Default">
        <name>$get</name>
        <full_name>\Swoole\Http\Request::get</full_name>
        <default></default>
        <docblock line="10">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="11" package="Default">
        <name>$post</name>
        <full_name>\Swoole\Http\Request::post</full_name>
        <default></default>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="12" package="Default">
        <name>$header</name>
        <full_name>\Swoole\Http\Request::header</full_name>
        <default></default>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="13" package="Default">
        <name>$server</name>
        <full_name>\Swoole\Http\Request::server</full_name>
        <default></default>
        <docblock line="13">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="14" package="Default">
        <name>$cookie</name>
        <full_name>\Swoole\Http\Request::cookie</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="15" package="Default">
        <name>$files</name>
        <full_name>\Swoole\Http\Request::files</full_name>
        <default></default>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$fd</name>
        <full_name>\Swoole\Http\Request::fd</full_name>
        <default></default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="23" package="Default">
        <name>rawContent</name>
        <full_name>\Swoole\Http\Request::rawContent()</full_name>
        <docblock line="23">
          <description>获取非urlencode-form表单的POST原始数据</description>
          <long-description></long-description>
          <tag name="return" line="23" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Http\Request</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="663" package="Default">
      <extends>\Swoole\Http\Request</extends>
      <name>swoole_http_response</name>
      <full_name>\swoole_http_response</full_name>
      <docblock line="663">
        <description>Http请求对象
Class swoole_http_request</description>
        <long-description></long-description>
        <tag name="package" line="663" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Http\Request" refers="\Swoole\Http\Request" link="/classes/Swoole.Http.Request.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="10" package="Default">
        <name>$get</name>
        <full_name>\Swoole\Http\Request::get</full_name>
        <default></default>
        <docblock line="10">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="11" package="Default">
        <name>$post</name>
        <full_name>\Swoole\Http\Request::post</full_name>
        <default></default>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="12" package="Default">
        <name>$header</name>
        <full_name>\Swoole\Http\Request::header</full_name>
        <default></default>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="13" package="Default">
        <name>$server</name>
        <full_name>\Swoole\Http\Request::server</full_name>
        <default></default>
        <docblock line="13">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="14" package="Default">
        <name>$cookie</name>
        <full_name>\Swoole\Http\Request::cookie</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="15" package="Default">
        <name>$files</name>
        <full_name>\Swoole\Http\Request::files</full_name>
        <default></default>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$fd</name>
        <full_name>\Swoole\Http\Request::fd</full_name>
        <default></default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="23" package="Default">
        <name>rawContent</name>
        <full_name>\Swoole\Http\Request::rawContent()</full_name>
        <docblock line="23">
          <description>获取非urlencode-form表单的POST原始数据</description>
          <long-description></long-description>
          <tag name="return" line="23" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Http\Request</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="668" package="Default">
      <extends>\Swoole\Http\Server</extends>
      <name>swoole_http_server</name>
      <full_name>\swoole_http_server</full_name>
      <docblock line="668">
        <description>Class swoole_http_server</description>
        <long-description>内置 Web 服务器</long-description>
        <tag name="package" line="668" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Http\Server" refers="\Swoole\Http\Server" link="/classes/Swoole.Http.Server.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="16" package="Default">
        <name>setGlobal</name>
        <full_name>\Swoole\Http\Server::setGlobal()</full_name>
        <docblock line="16">
          <description>启用数据合并，HTTP请求数据到PHP的GET/POST/COOKIE全局数组</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="" variable="$flag"/>
          <tag name="param" line="16" description="" type="integer" variable="$request_flag">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$request_flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Http\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="673" package="Default">
      <extends>\Swoole\Atomic</extends>
      <name>swoole_atomic</name>
      <full_name>\swoole_atomic</full_name>
      <docblock line="673">
        <description>Class swoole_atomic</description>
        <long-description>woole_atomic是swoole扩展提供的原子计数操作类，可以方便整数的无锁原子增减。
swoole_atomic使用共享内存，可以在不同的进程之间操作计数
swoole_atomic基于gcc提供的CPU原子指令，无需加锁
swoole_atomic在服务器程序中必须在swoole_server-&gt;start前创建才能在Worker进程中使用</long-description>
        <tag name="package" line="673" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Atomic" refers="\Swoole\Atomic" link="/classes/Swoole.Atomic.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="18" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Atomic::__construct()</full_name>
        <docblock line="18">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="18" description="" type="integer" variable="$init_value">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$init_value</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="28" package="Default">
        <name>add</name>
        <full_name>\Swoole\Atomic::add()</full_name>
        <docblock line="28">
          <description>增加计数</description>
          <long-description></long-description>
          <tag name="param" line="28" description="" type="" variable="$add_value"/>
          <tag name="return" line="28" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$add_value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="38" package="Default">
        <name>sub</name>
        <full_name>\Swoole\Atomic::sub()</full_name>
        <docblock line="38">
          <description>减少计数</description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="" variable="$sub_value"/>
          <tag name="return" line="38" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sub_value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="46" package="Default">
        <name>get</name>
        <full_name>\Swoole\Atomic::get()</full_name>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="Default">
        <name>set</name>
        <full_name>\Swoole\Atomic::set()</full_name>
        <docblock line="55">
          <description>将当前值设置为指定的数字</description>
          <long-description></long-description>
          <tag name="param" line="55" description="" type="" variable="$value"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="65" package="Default">
        <name>cmpset</name>
        <full_name>\Swoole\Atomic::cmpset()</full_name>
        <docblock line="65">
          <description>如果当前数值等于参数1，则将当前数值设置为参数2</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="integer" variable="$cmp_value">
            <type>integer</type>
          </tag>
          <tag name="param" line="65" description="" type="integer" variable="$set_value">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$cmp_value</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$set_value</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Atomic</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="678" package="Default">
      <extends>\Swoole\Buffer</extends>
      <name>swoole_buffer</name>
      <full_name>\swoole_buffer</full_name>
      <docblock line="678">
        <description>Class swoole_buffer</description>
        <long-description>内存操作</long-description>
        <tag name="package" line="678" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Buffer" refers="\Swoole\Buffer" link="/classes/Swoole.Buffer.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="15" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Buffer::__construct()</full_name>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="15" description="" type="integer" variable="$size">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$size</name>
          <default>128</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="25" package="Default">
        <name>append</name>
        <full_name>\Swoole\Buffer::append()</full_name>
        <docblock line="25">
          <description>将一个字符串数据追加到缓存区末尾</description>
          <long-description></long-description>
          <tag name="param" line="25" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="25" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="39" package="Default">
        <name>substr</name>
        <full_name>\Swoole\Buffer::substr()</full_name>
        <docblock line="39">
          <description>从缓冲区中取出内容</description>
          <long-description>substr会复制一次内存
remove后内存并没有释放，只是底层进行了指针偏移。当销毁此对象时才会真正释放内存</long-description>
          <tag name="param" line="39" description="&lt;p&gt;表示偏移量，如果为负数，表示倒数计算偏移量&lt;/p&gt;" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;表示读取数据的长度，默认为从$offset到整个缓存区末尾&lt;/p&gt;" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;表示从缓冲区的头部将此数据移除。只有$offset = 0时此参数才有效&lt;/p&gt;" type="boolean" variable="$remove">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$remove</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="48" package="Default">
        <name>clear</name>
        <full_name>\Swoole\Buffer::clear()</full_name>
        <docblock line="48">
          <description>清理缓存区数据
执行此操作后，缓存区将重置。swoole_buffer对象就可以用来处理新的请求了。
swoole_buffer基于指针运算实现clear，并不会写内存</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="57" package="Default">
        <name>expand</name>
        <full_name>\Swoole\Buffer::expand()</full_name>
        <docblock line="57">
          <description>为缓存区扩容</description>
          <long-description></long-description>
          <tag name="param" line="57" description="&lt;p&gt;指定新的缓冲区尺寸，必须大于当前的尺寸&lt;/p&gt;" type="integer" variable="$new_size">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$new_size</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="72" package="Default">
        <name>write</name>
        <full_name>\Swoole\Buffer::write()</full_name>
        <docblock line="72">
          <description>向缓存区的任意内存位置写数据
此函数可以直接写内存。所以使用务必要谨慎，否则可能会破坏现有数据</description>
          <long-description>$data不能超过缓存区的最大尺寸。
write方法不会自动扩容</long-description>
          <tag name="param" line="72" description="&lt;p&gt;偏移量&lt;/p&gt;" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="param" line="72" description="&lt;p&gt;写入的数据&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Buffer</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="683" package="Default">
      <extends>\Swoole\Client</extends>
      <name>swoole_client</name>
      <full_name>\swoole_client</full_name>
      <docblock line="683">
        <description>swoole_client</description>
        <long-description>Author: EagleWu &lt;eaglewudi@gmail.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="683" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Client" refers="\Swoole\Client" link="/classes/Swoole.Client.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="18" package="Default">
        <name>$errCode</name>
        <full_name>\Swoole\Client::errCode</full_name>
        <default></default>
        <docblock line="18">
          <description>函数执行错误会设置该变量</description>
          <long-description></long-description>
          <tag name="var" line="18" description="" type="" variable=""/>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="32" package="Default">
        <name>$sock</name>
        <full_name>\Swoole\Client::sock</full_name>
        <default></default>
        <docblock line="32">
          <description>socket的文件描述符</description>
          <long-description>PHP代码中可以使用:
$sock = fopen("php://fd/".$swoole_client-&gt;sock);

将swoole_client的socket转换成一个stream socket。可以调用fread/fwrite/fclose等函数进程操作。
swoole_server中的$fd不能用此方法转换，因为$fd只是一个数字，$fd文件描述符属于主进程
$swoole_client-&gt;sock可以转换成int作为数组的key.</long-description>
          <tag name="var" line="32" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="41" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Client::__construct()</full_name>
        <docblock line="41">
          <description>swoole_client构造函数</description>
          <long-description></long-description>
          <tag name="param" line="41" description="&lt;p&gt;指定socket的类型，支持TCP/UDP、TCP6/UDP64种&lt;/p&gt;" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;SWOOLE_SOCK_SYNC/SWOOLE_SOCK_ASYNC  同步/异步&lt;/p&gt;" type="integer" variable="$sync_type">
            <type>integer</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;链接的编号，用于长连接复用&lt;/p&gt;" type="string" variable="$connectionKey">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sync_type</name>
          <default>SWOOLE_SOCK_SYNC</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$connectionKey</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="Default">
        <name>connect</name>
        <full_name>\Swoole\Client::connect()</full_name>
        <docblock line="55">
          <description>连接到远程服务器</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;是远程服务器的地址 v1.6.10+ 支持填写域名 Swoole会自动进行DNS查询&lt;/p&gt;" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;是远程服务器端口&lt;/p&gt;" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;是网络IO的超时，单位是s，支持浮点数。默认为0.1s，即100ms&lt;/p&gt;" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;参数在UDP类型时表示是否启用udp_connect。设定此选项后将绑定$host与$port，此UDP将会丢弃非指定host/port的数据包。&#10;在send/recv前必须使用swoole_client_select来检测是否完成了连接&lt;/p&gt;" type="integer" variable="$flag">
            <type>integer</type>
          </tag>
          <tag name="return" line="55" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.1</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="69" package="Default">
        <name>send</name>
        <full_name>\Swoole\Client::send()</full_name>
        <docblock line="69">
          <description>向远程服务器发送数据</description>
          <long-description>参数为字符串，支持二进制数据。
成功发送返回的已发数据长度
失败返回false，并设置$swoole_client-&gt;errCode</long-description>
          <tag name="param" line="69" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="79" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Client::sendto()</full_name>
        <docblock line="79">
          <description>向任意IP:PORT的服务器发送数据包，仅支持UDP/UDP6的client</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="" variable="$ip"/>
          <tag name="param" line="79" description="" type="" variable="$port"/>
          <tag name="param" line="79" description="" type="" variable="$data"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="95" package="Default">
        <name>recv</name>
        <full_name>\Swoole\Client::recv()</full_name>
        <docblock line="95">
          <description>从服务器端接收数据</description>
          <long-description>如果设定了$waitall就必须设定准确的$size，否则会一直等待，直到接收的数据长度达到$size
如果设置了错误的$size，会导致recv超时，返回 false
调用成功返回结果字符串，失败返回 false，并设置$swoole_client-&gt;errCode属性</long-description>
          <tag name="param" line="95" description="&lt;p&gt;接收数据的最大长度&lt;/p&gt;" type="integer" variable="$size">
            <type>integer</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;是否等待所有数据到达后返回&lt;/p&gt;" type="boolean" variable="$waitall">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$size</name>
          <default>65535</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$waitall</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="106" package="Default">
        <name>close</name>
        <full_name>\Swoole\Client::close()</full_name>
        <docblock line="106">
          <description>关闭远程连接</description>
          <long-description>swoole_client对象在析构时会自动close</long-description>
          <tag name="return" line="106" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="117" package="Default">
        <name>on</name>
        <full_name>\Swoole\Client::on()</full_name>
        <docblock line="117">
          <description>注册异步事件回调函数</description>
          <long-description></long-description>
          <tag name="param" line="117" description="" type="" variable="$event_name"/>
          <tag name="param" line="117" description="" type="" variable="$callback_function"/>
          <tag name="return" line="117" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="125" package="Default">
        <name>isConnected</name>
        <full_name>\Swoole\Client::isConnected()</full_name>
        <docblock line="125">
          <description>判断是否连接到服务器</description>
          <long-description></long-description>
          <tag name="return" line="125" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="133" package="Default">
        <name>getsockname</name>
        <full_name>\Swoole\Client::getsockname()</full_name>
        <docblock line="133">
          <description>获取客户端socket的host:port信息</description>
          <long-description></long-description>
          <tag name="return" line="133" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="142" package="Default">
        <name>getpeername</name>
        <full_name>\Swoole\Client::getpeername()</full_name>
        <docblock line="142">
          <description>获取远端socket的host:port信息，仅用于UDP/UDP6协议
UDP发送数据到服务器后，可能会由其他的Server进行回复</description>
          <long-description></long-description>
          <tag name="return" line="142" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="150" package="Default">
        <name>set</name>
        <full_name>\Swoole\Client::set()</full_name>
        <docblock line="150">
          <description>设置客户端参数</description>
          <long-description></long-description>
          <tag name="param" line="150" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="157" package="Default">
        <name>sleep</name>
        <full_name>\Swoole\Client::sleep()</full_name>
        <docblock line="157">
          <description>睡眠，停止接收数据</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="164" package="Default">
        <name>wakeup</name>
        <full_name>\Swoole\Client::wakeup()</full_name>
        <docblock line="164">
          <description>唤醒，开始接收数据</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Client</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="688" package="Default">
      <extends>\Swoole\Server</extends>
      <name>swoole_server</name>
      <full_name>\swoole_server</full_name>
      <docblock line="688">
        <description>Class swoole_server</description>
        <long-description>Author: wudi &lt;wudi23@baidu.com&gt;
Date: 2016/02/17</long-description>
        <tag name="package" line="688" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Server" refers="\Swoole\Server" link="/classes/Swoole.Server.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="693" package="Default">
      <extends>\Swoole\Lock</extends>
      <name>swoole_lock</name>
      <full_name>\swoole_lock</full_name>
      <docblock line="693">
        <description>Class swoole_lock</description>
        <long-description></long-description>
        <tag name="package" line="693" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Lock" refers="\Swoole\Lock" link="/classes/Swoole.Lock.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="16" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Lock::__construct()</full_name>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="16" description="&lt;p&gt;为锁的类型&lt;/p&gt;" type="integer" variable="$type">
            <type>integer</type>
          </tag>
          <tag name="param" line="16" description="&lt;p&gt;当类型为SWOOLE_FILELOCK时必须传入，指定文件锁的路径&#10;注意每一种类型的锁支持的方法都不一样。如读写锁、文件锁可以支持 $lock-&gt;lock_read()。&#10;另外除文件锁外，其他类型的锁必须在父进程内创建，这样fork出的子进程之间才可以互相争抢锁。&lt;/p&gt;" type="string" variable="$lockfile">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lockfile</name>
          <default>NULL</default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="26" package="Default">
        <name>lock</name>
        <full_name>\Swoole\Lock::lock()</full_name>
        <docblock line="26">
          <description>加锁操作</description>
          <long-description>如果有其他进程持有锁，那这里将进入阻塞，直到持有锁的进程unlock。</long-description>
        </docblock>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="39" package="Default">
        <name>trylock</name>
        <full_name>\Swoole\Lock::trylock()</full_name>
        <docblock line="39">
          <description>加锁操作</description>
          <long-description>与lock方法不同的是，trylock()不会阻塞，它会立即返回。
当返回false时表示抢锁失败，有其他进程持有锁。返回true时表示加锁成功，此时可以修改共享变量。

SWOOlE_SEM 信号量没有trylock方法</long-description>
        </docblock>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="47" package="Default">
        <name>unlock</name>
        <full_name>\Swoole\Lock::unlock()</full_name>
        <docblock line="47">
          <description>释放锁</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="60" package="Default">
        <name>lock_read</name>
        <full_name>\Swoole\Lock::lock_read()</full_name>
        <docblock line="60">
          <description>阻塞加锁</description>
          <long-description>lock_read方法仅可用在读写锁(SWOOLE_RWLOCK)和文件锁(SWOOLE_FILELOCK)中，表示仅仅锁定读。
在持有读锁的过程中，其他进程依然可以获得读锁，可以继续发生读操作。但不能$lock-&gt;lock()或$lock-&gt;trylock()，这两个方法是获取独占锁的。

当另外一个进程获得了独占锁(调用$lock-&gt;lock/$lock-&gt;trylock)时，$lock-&gt;lock_read()会发生阻塞，直到持有锁的进程释放。</long-description>
        </docblock>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="70" package="Default">
        <name>trylock_read</name>
        <full_name>\Swoole\Lock::trylock_read()</full_name>
        <docblock line="70">
          <description>非阻塞加锁</description>
          <long-description>此方法与lock_read相同，但是非阻塞的。调用会立即返回，必须检测返回值以确定是否拿到了锁。</long-description>
        </docblock>
        <inherited_from>\Swoole\Lock</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="698" package="Default">
      <extends>\Swoole\Redis</extends>
      <name>swoole_redis</name>
      <full_name>\swoole_redis</full_name>
      <docblock line="698">
        <description>异步Redis客户端</description>
        <long-description></long-description>
        <tag name="package" line="698" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Redis" refers="\Swoole\Redis" link="/classes/Swoole.Redis.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="13" package="Default">
        <name>on</name>
        <full_name>\Swoole\Redis::on()</full_name>
        <docblock line="13">
          <description>注册事件回调函数</description>
          <long-description></long-description>
          <tag name="param" line="13" description="" type="" variable="$event_name"/>
          <tag name="param" line="13" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Redis</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="24" package="Default">
        <name>connect</name>
        <full_name>\Swoole\Redis::connect()</full_name>
        <docblock line="24">
          <description>连接到服务器</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="24" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="24" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Redis</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="32" package="Default">
        <name>close</name>
        <full_name>\Swoole\Redis::close()</full_name>
        <docblock line="32">
          <description>关闭连接</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\Swoole\Redis</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="40" package="Default">
        <name>get</name>
        <full_name>\Swoole\Redis::get()</full_name>
        <docblock line="40">
          <description>获取KEY值</description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="" variable="$key"/>
        </docblock>
        <inherited_from>\Swoole\Redis</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="49" package="Default">
        <name>set</name>
        <full_name>\Swoole\Redis::set()</full_name>
        <docblock line="49">
          <description>将当前值设置为指定的数字</description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$value"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Redis</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="703" package="Default">
      <extends>\Swoole\Process</extends>
      <name>swoole_process</name>
      <full_name>\swoole_process</full_name>
      <docblock line="703">
        <description>swoole进程管理类
内置IPC通信支持，子进程和主进程之间可以方便的通信
支持标准输入输出重定向，子进程内echo，会发送到管道中，而不是输出屏幕
Class swoole_process</description>
        <long-description></long-description>
        <tag name="package" line="703" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Process" refers="\Swoole\Process" link="/classes/Swoole.Process.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$pid</name>
        <full_name>\Swoole\Process::pid</full_name>
        <default></default>
        <docblock line="17">
          <description>进程的PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="24" package="Default">
        <name>$pipe</name>
        <full_name>\Swoole\Process::pipe</full_name>
        <default></default>
        <docblock line="24">
          <description>管道PIPE</description>
          <long-description></long-description>
          <tag name="var" line="24" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="31" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Process::__construct()</full_name>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;子进程的回调函数&lt;/p&gt;" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="31" description="&lt;p&gt;是否重定向标准输入输出&lt;/p&gt;" type="boolean" variable="$redirect_stdin_stdout">
            <type>boolean</type>
          </tag>
          <tag name="param" line="31" description="&lt;p&gt;是否创建管道&lt;/p&gt;" type="boolean" variable="$create_pipe">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$redirect_stdin_stdout</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$create_pipe</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="41" package="Default">
        <name>write</name>
        <full_name>\Swoole\Process::write()</full_name>
        <docblock line="41">
          <description>向管道内写入数据</description>
          <long-description></long-description>
          <tag name="param" line="41" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="return" line="41" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="51" package="Default">
        <name>read</name>
        <full_name>\Swoole\Process::read()</full_name>
        <docblock line="51">
          <description>从管道内读取数据</description>
          <long-description></long-description>
          <tag name="param" line="51" description="&lt;p&gt;最大读取的长度&lt;/p&gt;" type="integer" variable="$buffer_len">
            <type>integer</type>
          </tag>
          <tag name="return" line="51" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$buffer_len</name>
          <default>8192</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="61" package="Default">
        <name>_exit</name>
        <full_name>\Swoole\Process::_exit()</full_name>
        <docblock line="61">
          <description>退出子进程，实际函数名为exit，IDE将exit识别为关键词了，会有语法错误，所以这里叫_exit</description>
          <long-description></long-description>
          <tag name="param" line="61" description="" type="integer" variable="$code">
            <type>integer</type>
          </tag>
          <tag name="return" line="61" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="71" package="Default">
        <name>exec</name>
        <full_name>\Swoole\Process::exec()</full_name>
        <docblock line="71">
          <description>执行另外的一个程序</description>
          <long-description></long-description>
          <tag name="param" line="71" description="&lt;p&gt;可执行文件的路径&lt;/p&gt;" type="string" variable="$execute_file">
            <type>string</type>
          </tag>
          <tag name="param" line="71" description="&lt;p&gt;参数数组&lt;/p&gt;" type="array" variable="$params">
            <type>array</type>
          </tag>
          <tag name="return" line="71" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$execute_file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="82" package="Default">
        <name>wait</name>
        <full_name>\Swoole\Process::wait()</full_name>
        <docblock line="82">
          <description>阻塞等待子进程退出，并回收
成功返回一个数组包含子进程的PID和退出状态码
如array('code' =&gt; 0, 'pid' =&gt; 15001)，失败返回false</description>
          <long-description></long-description>
          <tag name="return" line="82" description="| array" type="false">
            <type>false</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="91" package="Default">
        <name>daemon</name>
        <full_name>\Swoole\Process::daemon()</full_name>
        <docblock line="91">
          <description>守护进程化</description>
          <long-description></long-description>
          <tag name="param" line="91" description="" type="boolean" variable="$nochdir">
            <type>boolean</type>
          </tag>
          <tag name="param" line="91" description="" type="boolean" variable="$noclose">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nochdir</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$noclose</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="101" package="Default">
        <name>useQueue</name>
        <full_name>\Swoole\Process::useQueue()</full_name>
        <docblock line="101">
          <description>创建消息队列</description>
          <long-description></long-description>
          <tag name="param" line="101" description="&lt;p&gt;消息队列KEY&lt;/p&gt;" type="integer" variable="$msgkey">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="&lt;p&gt;模式&lt;/p&gt;" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$msgkey</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>2</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="110" package="Default">
        <name>push</name>
        <full_name>\Swoole\Process::push()</full_name>
        <docblock line="110">
          <description>向消息队列推送数据</description>
          <long-description></long-description>
          <tag name="param" line="110" description="" type="" variable="$data"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="120" package="Default">
        <name>pop</name>
        <full_name>\Swoole\Process::pop()</full_name>
        <docblock line="120">
          <description>从消息队列中提取数据</description>
          <long-description></long-description>
          <tag name="param" line="120" description="" type="integer" variable="$maxsize">
            <type>integer</type>
          </tag>
          <tag name="return" line="120" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$maxsize</name>
          <default>8192</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="131" package="Default">
        <name>kill</name>
        <full_name>\Swoole\Process::kill()</full_name>
        <docblock line="131">
          <description>向某个进程发送信号</description>
          <long-description></long-description>
          <tag name="param" line="131" description="" type="" variable="$pid"/>
          <tag name="param" line="131" description="" type="integer" variable="$sig">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$pid</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sig</name>
          <default>SIGTERM</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="141" package="Default">
        <name>signal</name>
        <full_name>\Swoole\Process::signal()</full_name>
        <docblock line="141">
          <description>注册信号处理函数
require swoole 1.7.9+</description>
          <long-description></long-description>
          <tag name="param" line="141" description="" type="integer" variable="$signo">
            <type>integer</type>
          </tag>
          <tag name="param" line="141" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$signo</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="150" package="Default">
        <name>start</name>
        <full_name>\Swoole\Process::start()</full_name>
        <docblock line="150">
          <description>启动子进程</description>
          <long-description></long-description>
          <tag name="return" line="150" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="158" package="Default">
        <name>name</name>
        <full_name>\Swoole\Process::name()</full_name>
        <docblock line="158">
          <description>为工作进程重命名</description>
          <long-description></long-description>
          <tag name="param" line="158" description="" type="" variable="$process_name"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process_name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Process</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="708" package="Default">
      <extends>\Swoole\Table</extends>
      <name>swoole_table</name>
      <full_name>\swoole_table</full_name>
      <docblock line="708">
        <description>内存表</description>
        <long-description></long-description>
        <tag name="package" line="708" description="Default"/>
        <tag name="inherited_from" description="\Swoole\Table" refers="\Swoole\Table" link="/classes/Swoole.Table.html"/>
      </docblock>
      <constant namespace="" line="10" package="Default">
        <name>TYPE_INT</name>
        <full_name>\Swoole\Table::TYPE_INT</full_name>
        <value>1</value>
        <docblock line="10">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="" line="11" package="Default">
        <name>TYPE_STRING</name>
        <full_name>\Swoole\Table::TYPE_STRING</full_name>
        <value>2</value>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <constant namespace="" line="12" package="Default">
        <name>TYPE_FLOAT</name>
        <full_name>\Swoole\Table::TYPE_FLOAT</full_name>
        <value>3</value>
        <docblock line="12">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="19" package="Default">
        <name>get</name>
        <full_name>\Swoole\Table::get()</full_name>
        <docblock line="19">
          <description>获取key</description>
          <long-description></long-description>
          <tag name="param" line="19" description="" type="" variable="$key"/>
          <tag name="return" line="19" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="29" package="Default">
        <name>set</name>
        <full_name>\Swoole\Table::set()</full_name>
        <docblock line="29">
          <description>设置key</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="" variable="$key"/>
          <tag name="param" line="29" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="29" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="38" package="Default">
        <name>del</name>
        <full_name>\Swoole\Table::del()</full_name>
        <docblock line="38">
          <description>删除key</description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="" variable="$key"/>
          <tag name="return" line="38" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="49" package="Default">
        <name>incr</name>
        <full_name>\Swoole\Table::incr()</full_name>
        <docblock line="49">
          <description>原子自增操作，可用于整形或浮点型列</description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="" variable="$key"/>
          <tag name="param" line="49" description="" type="" variable="$column"/>
          <tag name="param" line="49" description="" type="" variable="$incrby"/>
          <tag name="return" line="49" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$incrby</name>
          <default>1</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="59" package="Default">
        <name>decr</name>
        <full_name>\Swoole\Table::decr()</full_name>
        <docblock line="59">
          <description>原子自减操作，可用于整形或浮点型列</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="" variable="$key"/>
          <tag name="param" line="59" description="" type="" variable="$column"/>
          <tag name="param" line="59" description="" type="" variable="$decrby"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$decrby</name>
          <default>1</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="69" package="Default">
        <name>column</name>
        <full_name>\Swoole\Table::column()</full_name>
        <docblock line="69">
          <description>增加字段定义</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="" variable="$name"/>
          <tag name="param" line="69" description="" type="" variable="$type"/>
          <tag name="param" line="69" description="" type="integer" variable="$len">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$len</name>
          <default>4</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Default">
        <name>create</name>
        <full_name>\Swoole\Table::create()</full_name>
        <docblock line="77">
          <description>创建表，这里会申请操作系统内存</description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="85" package="Default">
        <name>lock</name>
        <full_name>\Swoole\Table::lock()</full_name>
        <docblock line="85">
          <description>锁定整个表</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="93" package="Default">
        <name>unlock</name>
        <full_name>\Swoole\Table::unlock()</full_name>
        <docblock line="93">
          <description>释放表锁</description>
          <long-description></long-description>
          <tag name="return" line="93" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Table</inherited_from>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="713" package="Default">
      <extends>\Swoole\WebSocket\Server</extends>
      <name>swoole_websocket_server</name>
      <full_name>\swoole_websocket_server</full_name>
      <docblock line="713">
        <description>Class swoole_http_server</description>
        <long-description>内置 Websocket 服务器</long-description>
        <tag name="package" line="713" description="Default"/>
        <tag name="inherited_from" description="\Swoole\WebSocket\Server" refers="\Swoole\WebSocket\Server" link="/classes/Swoole.WebSocket.Server.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="17" package="Default">
        <name>$master_pid</name>
        <full_name>\Swoole\Server::master_pid</full_name>
        <default></default>
        <docblock line="17">
          <description>主进程PID</description>
          <long-description></long-description>
          <tag name="var" line="17" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="26" package="Default">
        <name>$manager_pid</name>
        <full_name>\Swoole\Server::manager_pid</full_name>
        <default></default>
        <docblock line="26">
          <description>当前服务器管理进程的PID</description>
          <long-description>!! 只能在onStart/onWorkerStart之后获取到</long-description>
          <tag name="var" line="26" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="40" package="Default">
        <name>$worker_id</name>
        <full_name>\Swoole\Server::worker_id</full_name>
        <default></default>
        <docblock line="40">
          <description>当前Worker进程的编号</description>
          <long-description>这个属性与onWorkerStart时的$worker_id是相同的。

 * Worker进程ID范围是[0, $serv-&gt;setting['worker_num'])
 * task进程ID范围是[$serv-&gt;setting['worker_num'], $serv-&gt;setting['worker_num'] + $serv-&gt;setting['task_worker_num'])

工作进程重启后worker_id的值是不变的</long-description>
          <tag name="var" line="40" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="46" package="Default">
        <name>$worker_pid</name>
        <full_name>\Swoole\Server::worker_pid</full_name>
        <default></default>
        <docblock line="46">
          <description>当前Worker进程的ID，0 - ($serv-&gt;setting[worker_num]-1)</description>
          <long-description></long-description>
          <tag name="var" line="46" description="" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="56" package="Default">
        <name>$taskworker</name>
        <full_name>\Swoole\Server::taskworker</full_name>
        <default></default>
        <docblock line="56">
          <description>是否 Task 工作进程</description>
          <long-description>true  表示当前的进程是Task工作进程
 false 表示当前的进程是Worker进程</long-description>
          <tag name="var" line="56" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="72" package="Default">
        <name>$connections</name>
        <full_name>\Swoole\Server::connections</full_name>
        <default></default>
        <docblock line="72">
          <description>TCP连接迭代器，可以使用foreach遍历服务器当前所有的连接，此属性的功能与swoole_server-&gt;connnection_list是一致的，但是更加友好。遍历的元素为单个连接的fd</description>
          <long-description>连接迭代器依赖pcre库，未安装pcre库无法使用此功能

     foreach($server-&gt;connections as $fd)
     {
         $server-&gt;send($fd, "hello");
     }

     echo "当前服务器共有 ".count($server-&gt;connections). " 个连接\n";</long-description>
          <tag name="var" line="72" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="17" package="Default">
        <name>push</name>
        <full_name>\Swoole\WebSocket\Server::push()</full_name>
        <docblock line="17">
          <description>向某个WebSocket客户端连接推送数据</description>
          <long-description></long-description>
          <tag name="param" line="17" description="" type="" variable="$fd"/>
          <tag name="param" line="17" description="" type="" variable="$data"/>
          <tag name="param" line="17" description="" type="boolean" variable="$binary_data">
            <type>boolean</type>
          </tag>
          <tag name="param" line="17" description="" type="boolean" variable="$finish">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$binary_data</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\WebSocket\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="28" package="Default">
        <name>pack</name>
        <full_name>\Swoole\WebSocket\Server::pack()</full_name>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="28" description="" type="" variable="$data"/>
          <tag name="param" line="28" description="" type="" variable="$opcode"/>
          <tag name="param" line="28" description="" type="boolean" variable="$finish">
            <type>boolean</type>
          </tag>
          <tag name="param" line="28" description="" type="boolean" variable="$mask">
            <type>boolean</type>
          </tag>
          <tag name="return" line="28" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$opcode</name>
          <default>WEBSOCKET_OPCODE_TEXT</default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$finish</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mask</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\WebSocket\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="16" package="Default">
        <name>setGlobal</name>
        <full_name>\Swoole\Http\Server::setGlobal()</full_name>
        <docblock line="16">
          <description>启用数据合并，HTTP请求数据到PHP的GET/POST/COOKIE全局数组</description>
          <long-description></long-description>
          <tag name="param" line="16" description="" type="" variable="$flag"/>
          <tag name="param" line="16" description="" type="integer" variable="$request_flag">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$flag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$request_flag</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Http\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="81" package="Default">
        <name>__construct</name>
        <full_name>\Swoole\Server::__construct()</full_name>
        <docblock line="81">
          <description>swoole_server构造函数</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="" variable="$host"/>
          <tag name="param" line="81" description="" type="" variable="$port"/>
          <tag name="param" line="81" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$sock_type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>SWOOLE_PROCESS</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sock_type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="124" package="Default">
        <name>on</name>
        <full_name>\Swoole\Server::on()</full_name>
        <docblock line="124">
          <description>注册事件回调函数，与swoole_server-&gt;on相同。swoole_http_server-&gt;on的不同之处是：</description>
          <long-description>* swoole_http_server-&gt;on不接受onConnect/onReceive回调设置
* swoole_http_server-&gt;on 额外接受1种新的事件类型onRequest

 事件列表

 * onStart
 * onShutdown
 * onWorkerStart
 * onWorkerStop
 * onTimer
 * onConnect
 * onReceive
 * onClose
 * onTask
 * onFinish
 * onPipeMessage
 * onWorkerError
 * onManagerStart
 * onManagerStop

    $http_server-&gt;on('request', function(swoole_http_request $request, swoole_http_response $response) {
        $response-&gt;end("&lt;h1&gt;hello swoole&lt;/h1&gt;");
    })


在收到一个完整的Http请求后，会回调此函数。回调函数共有2个参数：

* $request，Http请求信息对象，包含了header/get/post/cookie等相关信息
* $response，Http响应对象，支持cookie/header/status等Http操作


!! $response/$request 对象传递给其他函数时，不要加&amp;引用符号</long-description>
          <tag name="param" line="124" description="" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="135" package="Default">
        <name>set</name>
        <full_name>\Swoole\Server::set()</full_name>
        <docblock line="135">
          <description>设置运行时参数</description>
          <long-description>swoole_server-&gt;set函数用于设置swoole_server运行时的各项参数。服务器启动后通过$serv-&gt;setting来访问set函数设置的参数数组。</long-description>
          <tag name="param" line="135" description="" type="array" variable="$setting">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="Default">
        <name>start</name>
        <full_name>\Swoole\Server::start()</full_name>
        <docblock line="146">
          <description>启动server，监听所有TCP/UDP端口</description>
          <long-description>启动成功后会创建worker_num+2个进程。主进程+Manager进程+worker_num个Worker进程</long-description>
          <tag name="return" line="146" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="176" package="Default">
        <name>send</name>
        <full_name>\Swoole\Server::send()</full_name>
        <docblock line="176">
          <description>向客户端发送数据</description>
          <long-description>* $data，发送的数据。TCP协议最大不得超过2M，UDP协议不得超过64K
 * 发送成功会返回true，如果连接已被关闭或发送失败会返回false

TCP服务器

 * send操作具有原子性，多个进程同时调用send向同一个连接发送数据，不会发生数据混杂
 * 如果要发送超过2M的数据，可以将数据写入临时文件，然后通过sendfile接口进行发送

swoole-1.6以上版本不需要$from_id

UDP服务器

 * send操作会直接在worker进程内发送数据包，不会再经过主进程转发
 * 使用fd保存客户端IP，from_id保存from_fd和port
 * 如果在onReceive后立即向客户端发送数据，可以不传$from_id
 * 如果向其他UDP客户端发送数据，必须要传入from_id
 * 在外网服务中发送超过64K的数据会分成多个传输单元进行发送，如果其中一个单元丢包，会导致整个包被丢弃。所以外网服务，建议发送1.5K以下的数据包</long-description>
          <tag name="param" line="176" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="176" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="176" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="176" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="204" package="Default">
        <name>sendto</name>
        <full_name>\Swoole\Server::sendto()</full_name>
        <docblock line="204">
          <description>向任意的客户端IP:PORT发送UDP数据包</description>
          <long-description>* $ip为IPv4字符串，如192.168.1.102。如果IP不合法会返回错误
 * $port为 1-65535的网络端口号，如果端口错误发送会失败
 * $data要发送的数据内容，可以是文本或者二进制内容
 * $ipv6 是否为IPv6地址，可选参数，默认为false

示例

     //向IP地址为220.181.57.216主机的9502端口发送一个hello world字符串。
     $server-&gt;sendto('220.181.57.216', 9502, "hello world");
     //向IPv6服务器发送UDP数据包
     $server-&gt;sendto('2600:3c00::f03c:91ff:fe73:e98f', 9501, "hello world", true);

server必须监听了UDP的端口，才可以使用swoole_server-&gt;sendto
server必须监听了UDP6的端口，才可以使用swoole_server-&gt;sendto向IPv6地址发送数据</long-description>
          <tag name="param" line="204" description="" type="string" variable="$ip">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="204" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="204" description="" type="boolean" variable="$ipv6">
            <type>boolean</type>
          </tag>
          <tag name="return" line="204" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$ip</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$ipv6</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="221" package="Default">
        <name>close</name>
        <full_name>\Swoole\Server::close()</full_name>
        <docblock line="221">
          <description>关闭客户端连接</description>
          <long-description>!! swoole-1.6以上版本不需要$from_id swoole-1.5.8以下的版本，务必要传入正确的$from_id，否则可能会导致连接泄露

操作成功返回true，失败返回false.

Server主动close连接，也一样会触发onClose事件。不要在close之后写清理逻辑。应当放置到onClose回调中处理。</long-description>
          <tag name="param" line="221" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="221" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="221" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="241" package="Default">
        <name>taskwait</name>
        <full_name>\Swoole\Server::taskwait()</full_name>
        <docblock line="241">
          <description>taskwait与task方法作用相同，用于投递一个异步的任务到task进程池去执行。
与task不同的是taskwait是阻塞等待的，直到任务完成或者超时返回</description>
          <long-description>$result为任务执行的结果，由$serv-&gt;finish函数发出。如果此任务超时，这里会返回false。

taskwait是阻塞接口，如果你的Server是全异步的请使用swoole_server::task和swoole_server::finish,不要使用taskwait
第3个参数可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
$dst_worker_id在1.6.11+后可用，默认为随机投递
taskwait方法不能在task进程中调用</long-description>
          <tag name="param" line="241" description="" type="mixed" variable="$task_data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="241" description="" type="float" variable="$timeout">
            <type>float</type>
          </tag>
          <tag name="param" line="241" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="241" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default>0.5</default>
          <type>float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="267" package="Default">
        <name>task</name>
        <full_name>\Swoole\Server::task()</full_name>
        <docblock line="267">
          <description>投递一个异步任务到task_worker池中。此函数会立即返回。worker进程可以继续处理新的请求</description>
          <long-description>* $data要投递的任务数据，可以为除资源类型之外的任意PHP变量
 * $dst_worker_id可以制定要给投递给哪个task进程，传入ID即可，范围是0 - serv-&gt;task_worker_num
 * 返回值为整数($task_id)，表示此任务的ID。如果有finish回应，onFinish回调中会携带$task_id参数

此功能用于将慢速的任务异步地去执行，比如一个聊天室服务器，可以用它来进行发送广播。当任务完成时，在task进程中调用$serv-&gt;finish("finish")告诉worker进程此任务已完成。当然swoole_server-&gt;finish是可选的。

 * AsyncTask功能在1.6.4版本增加，默认不启动task功能，需要在手工设置task_worker_num来启动此功能
 * task_worker的数量在swoole_server::set参数中调整，如task_worker_num =&gt; 64，表示启动64个进程来接收异步任务


注意事项

 * 使用swoole_server_task必须为Server设置onTask和onFinish回调，否则swoole_server-&gt;start会失败
 * task操作的次数必须小于onTask处理速度，如果投递容量超过处理能力，task会塞满缓存区，导致worker进程发生阻塞。worker进程将无法接收新的请求</long-description>
          <tag name="param" line="267" description="" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="267" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="267" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="312" package="Default">
        <name>sendMessage</name>
        <full_name>\Swoole\Server::sendMessage()</full_name>
        <docblock line="312">
          <description>此函数可以向任意worker进程或者task进程发送消息。在非主进程和管理进程中可调用。收到消息的进程会触发onPipeMessage事件</description>
          <long-description>* $message为发送的消息数据内容
 * $dst_worker_id为目标进程的ID，范围是0 ~ (worker_num + task_worker_num - 1)

!! 使用sendMessage必须注册onPipeMessage事件回调函数

     $serv = new swoole_server("0.0.0.0", 9501);
     $serv-&gt;set(array(
         'worker_num' =&gt; 2,
         'task_worker_num' =&gt; 2,
     ));
     $serv-&gt;on('pipeMessage', function($serv, $src_worker_id, $data) {
         echo "#{$serv-&gt;worker_id} message from #$src_worker_id: $data\n";
     });
     $serv-&gt;on('task', function ($serv, $task_id, $from_id, $data){
         var_dump($task_id, $from_id, $data);
     });
     $serv-&gt;on('finish', function ($serv, $fd, $from_id){

     });
     $serv-&gt;on('receive', function (swoole_server $serv, $fd, $from_id, $data) {
         if (trim($data) == 'task')
         {
             $serv-&gt;task("async task coming");
         }
         else
         {
             $worker_id = 1 - $serv-&gt;worker_id;
             $serv-&gt;sendMessage("hello task process", $worker_id);
         }
     });

     $serv-&gt;start();</long-description>
          <tag name="param" line="312" description="" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="312" description="" type="integer" variable="$dst_worker_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dst_worker_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="329" package="Default">
        <name>finish</name>
        <full_name>\Swoole\Server::finish()</full_name>
        <docblock line="329">
          <description>此函数用于在task进程中通知worker进程，投递的任务已完成。此函数可以传递结果数据给worker进程</description>
          <long-description>$serv-&gt;finish("response");

使用swoole_server::finish函数必须为Server设置onFinish回调函数。此函数只可用于task进程的onTask回调中

swoole_server::finish是可选的。如果worker进程不关心任务执行的结果，不需要调用此函数
在onTask回调函数中return字符串，等同于调用finish</long-description>
          <tag name="param" line="329" description="" type="string" variable="$task_data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$task_data</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="344" package="Default">
        <name>heartbeat</name>
        <full_name>\Swoole\Server::heartbeat()</full_name>
        <docblock line="344">
          <description>检测服务器所有连接，并找出已经超过约定时间的连接。
如果指定if_close_connection，则自动关闭超时的连接。未指定仅返回连接的fd数组'</description>
          <long-description>* $if_close_connection是否关闭超时的连接，默认为true
 * 调用成功将返回一个连续数组，元素是已关闭的$fd。
 * 调用失败返回false</long-description>
          <tag name="param" line="344" description="" type="boolean" variable="$if_close_connection">
            <type>boolean</type>
          </tag>
          <tag name="return" line="344" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$if_close_connection</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="377" package="Default">
        <name>connection_info</name>
        <full_name>\Swoole\Server::connection_info()</full_name>
        <docblock line="377">
          <description>获取连接的信息</description>
          <long-description>connection_info可用于UDP服务器，但需要传入from_id参数

     array (
          'from_id' =&gt; 0,
          'from_fd' =&gt; 12,
          'connect_time' =&gt; 1392895129,
          'last_time' =&gt; 1392895137,
          'from_port' =&gt; 9501,
          'remote_port' =&gt; 48918,
          'remote_ip' =&gt; '127.0.0.1',
     )

 * $udp_client = $serv-&gt;connection_info($fd, $from_id);
 * var_dump($udp_client);
 * from_id 来自哪个reactor线程
 * server_fd 来自哪个server socket 这里不是客户端连接的fd
 * server_port 来自哪个Server端口
 * remote_port 客户端连接的端口
 * remote_ip 客户端连接的ip
 * connect_time 连接到Server的时间，单位秒
 * last_time 最后一次发送数据的时间，单位秒</long-description>
          <tag name="param" line="377" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="377" description="" type="integer" variable="$from_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="377" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from_id</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="407" package="Default">
        <name>connection_list</name>
        <full_name>\Swoole\Server::connection_list()</full_name>
        <docblock line="407">
          <description>用来遍历当前Server所有的客户端连接，connection_list方法是基于共享内存的，不存在IOWait，遍历的速度很快。另外connection_list会返回所有TCP连接，而不仅仅是当前worker进程的TCP连接</description>
          <long-description>示例：

     $start_fd = 0;
     while(true)
     {
         $conn_list = $serv-&gt;connection_list($start_fd, 10);
         if($conn_list===false or count($conn_list) === 0)
         {
             echo "finish\n";
             break;
         }
         $start_fd = end($conn_list);
         var_dump($conn_list);
         foreach($conn_list as $fd)
         {
             $serv-&gt;send($fd, "broadcast");
         }
     }</long-description>
          <tag name="param" line="407" description="" type="integer" variable="$start_fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="407" description="" type="integer" variable="$pagesize">
            <type>integer</type>
          </tag>
          <tag name="return" line="407" description="| bool" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$start_fd</name>
          <default>-1</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pagesize</name>
          <default>100</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="437" package="Default">
        <name>reload</name>
        <full_name>\Swoole\Server::reload()</full_name>
        <docblock line="437">
          <description>重启所有worker进程</description>
          <long-description>一台繁忙的后端服务器随时都在处理请求，如果管理员通过kill进程方式来终止/重启服务器程序，可能导致刚好代码执行到一半终止。 这种情况下会产生数据的不一致。如交易系统中，支付逻辑的下一段是发货，假设在支付逻辑之后进程被终止了。会导致用户支付了货币，但并没有发货，后果非常严重。

Swoole提供了柔性终止/重启的机制，管理员只需要向SwooleServer发送特定的信号，Server的worker进程可以安全的结束。

 * SIGTERM: 向主进程发送此信号服务器将安全终止
 * 在PHP代码中可以调用$serv-&gt;shutdown()完成此操作
 * SIGUSR1: 向管理进程发送SIGUSR1信号，将平稳地restart所有worker进程
 * 在PHP代码中可以调用$serv-&gt;reload()完成此操作
 * swoole的reload有保护机制，当一次reload正在进行时，收到新的重启信号会丢弃

     #重启所有worker进程
     kill -USR1 主进程PID

仅重启task_worker的功能。只需向服务器发送SIGUSR2即可。

#仅重启task进程
kill -USR2 主进程PID
平滑重启只对onWorkerStart或onReceive等在Worker进程中include/require的PHP文件有效，Server启动前就已经include/require的PHP文件，不能通过平滑重启重新加载
对于Server的配置即$serv-&gt;set()中传入的参数设置，必须关闭/重启整个Server才可以重新加载
Server可以监听一个内网端口，然后可以接收远程的控制命令，去重启所有worker</long-description>
          <tag name="return" line="437" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="449" package="Default">
        <name>shutdown</name>
        <full_name>\Swoole\Server::shutdown()</full_name>
        <docblock line="449">
          <description>关闭服务器</description>
          <long-description>此函数可以用在worker进程内。向主进程发送SIGTERM也可以实现关闭服务器。

kill -15 主进程PID</long-description>
          <tag name="return" line="449" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="475" package="Default">
        <name>addlistener</name>
        <full_name>\Swoole\Server::addlistener()</full_name>
        <docblock line="475">
          <description>Swoole提供了swoole_server::addListener来增加监听的端口。业务代码中可以通过调用swoole_server::connection_info来获取某个连接来自于哪个端口</description>
          <long-description>* SWOOLE_TCP/SWOOLE_SOCK_TCP tcp ipv4 socket
* SWOOLE_TCP6/SWOOLE_SOCK_TCP6 tcp ipv6 socket
* SWOOLE_UDP/SWOOLE_SOCK_UDP udp ipv4 socket
* SWOOLE_UDP6/SWOOLE_SOCK_UDP6 udp ipv6 socket
* SWOOLE_UNIX_DGRAM unix socket dgram
* SWOOLE_UNIX_STREAM unix socket stream


可以混合使用UDP/TCP，同时监听内网和外网端口。 示例：

     $serv-&gt;addlistener("127.0.0.1", 9502, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("192.168.1.100", 9503, SWOOLE_SOCK_TCP);
     $serv-&gt;addlistener("0.0.0.0", 9504, SWOOLE_SOCK_UDP);
     $serv-&gt;addlistener("/var/run/myserv.sock", 0, SWOOLE_UNIX_STREAM);</long-description>
          <tag name="param" line="475" description="" type="string" variable="$host">
            <type>string</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$port">
            <type>integer</type>
          </tag>
          <tag name="param" line="475" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="497" package="Default">
        <name>stats</name>
        <full_name>\Swoole\Server::stats()</full_name>
        <docblock line="497">
          <description>得到当前Server的活动TCP连接数，启动时间，accpet/close的总次数等信息</description>
          <long-description>array (
       'start_time' =&gt; 1409831644,
       'connection_num' =&gt; 1,
       'accept_count' =&gt; 1,
       'close_count' =&gt; 0,
     );

 * start_time 服务器启动的时间
 * connection_num 当前连接的数量
 * accept_count 接受了多少个连接
 * close_count 关闭的连接数量
 * tasking_num 当前正在排队的任务数</long-description>
          <tag name="return" line="497" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="516" package="Default">
        <name>after</name>
        <full_name>\Swoole\Server::after()</full_name>
        <docblock line="516">
          <description>在指定的时间后执行函数</description>
          <long-description>swoole_server::after函数是一个一次性定时器，执行完成后就会销毁。

$after_time_ms 指定时间，单位为毫秒
$callback_function 时间到期后所执行的函数，必须是可以调用的。callback函数不接受任何参数
$after_time_ms 最大不得超过 86400000
此方法是swoole_timer_after函数的别名</long-description>
          <tag name="param" line="516" description="" type="" variable="$ms"/>
          <tag name="param" line="516" description="" type="integer" variable="$after_time_ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$callback_function">
            <type>mixed</type>
          </tag>
          <tag name="param" line="516" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$after_time_ms</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="527" package="Default">
        <name>listen</name>
        <full_name>\Swoole\Server::listen()</full_name>
        <docblock line="527">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default>SWOOLE_SOCK_TCP</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="544" package="Default">
        <name>addProcess</name>
        <full_name>\Swoole\Server::addProcess()</full_name>
        <docblock line="544">
          <description>添加一个用户自定义的工作进程</description>
          <long-description>* $process 为swoole_process对象，注意不需要执行start。在swoole_server启动时会自动创建进程，并执行指定的子进程函数
 * 创建的子进程可以调用$server对象提供的各个方法，如connection_list/connection_info/stats
 * 在worker进程中可以调用$process提供的方法与子进程进行通信
 * 此函数通常用于创建一个特殊的工作进程，用于监控、上报或者其他特殊的任务。

子进程会托管到Manager进程，如果发生致命错误，manager进程会重新创建一个</long-description>
          <tag name="param" line="544" description="" type="\Swoole\swoole_process" variable="$process">
            <type>\Swoole\swoole_process</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$process</name>
          <default></default>
          <type>\Swoole\swoole_process</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="568" package="Default">
        <name>addtimer</name>
        <full_name>\Swoole\Server::addtimer()</full_name>
        <docblock line="568">
          <description>设置定时器。1.6.12版本前此函数不能用在消息队列模式下，1.6.12后消息队列IPC模式也可以使用定时器</description>
          <long-description>第二个参数是定时器的间隔时间，单位为毫秒。swoole定时器的最小颗粒是1毫秒。支持多个定时器。此函数可以用于worker进程中。

 * swoole1.6.5之前支持的单位是秒，所以1.6.5之前传入的参数为1，那在1.6.5后需要传入1000
 * swoole1.6.5之后，addtimer必须在onStart/onWorkerStart/onConnect/onReceive/onClose等回调函数中才可以使用，否则会抛出错误。并且定时器无效
 * 注意不能存在2个相同间隔时间的定时器
 * 即使在代码中多次添加一个定时器，也只会有1个生效


 增加定时器后需要为Server设置onTimer回调函数，否则Server将无法启动。多个定时器都会回调此函数。在这个函数内需要自行switch，根据interval的值来判断是来自于哪个定时器。

     // 面向对象风格
     $serv-&gt;addtimer(1000); //1s
     $serv-&gt;addtimer(20); //20ms</long-description>
          <tag name="param" line="568" description="" type="integer" variable="$interval">
            <type>integer</type>
          </tag>
          <tag name="return" line="568" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="577" package="Default">
        <name>deltimer</name>
        <full_name>\Swoole\Server::deltimer()</full_name>
        <docblock line="577">
          <description>删除定时器</description>
          <long-description></long-description>
          <tag name="param" line="577" description="" type="" variable="$interval"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="595" package="Default">
        <name>tick</name>
        <full_name>\Swoole\Server::tick()</full_name>
        <docblock line="595">
          <description>增加tick定时器</description>
          <long-description>可以自定义回调函数。此函数是swoole_timer_tick的别名

worker进程结束运行后，所有定时器都会自动销毁

设置一个间隔时钟定时器，与after定时器不同的是tick定时器会持续触发，直到调用swoole_timer_clear清除。与swoole_timer_add不同的是tick定时器可以存在多个相同间隔时间的定时器。</long-description>
          <tag name="param" line="595" description="" type="integer" variable="$ms">
            <type>integer</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$callback">
            <type>mixed</type>
          </tag>
          <tag name="param" line="595" description="" type="mixed" variable="$param">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$interval_ms</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="603" package="Default">
        <name>clearAfter</name>
        <full_name>\Swoole\Server::clearAfter()</full_name>
        <docblock line="603">
          <description>删除设定的定时器，此定时器不会再触发</description>
          <long-description></long-description>
          <tag name="param" line="603" description="" type="" variable="$id"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="624" package="Default">
        <name>handler</name>
        <full_name>\Swoole\Server::handler()</full_name>
        <docblock line="624">
          <description>设置Server的事件回调函数</description>
          <long-description>第一个参数是swoole的资源对象
第二个参数是回调的名称, 大小写不敏感，具体内容参考回调函数列表
第三个函数是回调的PHP函数，可以是字符串，数组，匿名函数。比如
handler/on/set 方法只能在swoole_server::start前调用


     $serv-&gt;handler('onStart', 'my_onStart');
     $serv-&gt;handler('onStart', array($this, 'my_onStart'));
     $serv-&gt;handler('onStart', 'myClass::onStart');</long-description>
          <tag name="param" line="624" description="" type="string" variable="$event_name">
            <type>string</type>
          </tag>
          <tag name="param" line="624" description="" type="mixed" variable="$event_callback_function">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$event_callback_function</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="641" package="Default">
        <name>sendfile</name>
        <full_name>\Swoole\Server::sendfile()</full_name>
        <docblock line="641">
          <description>发送文件到TCP客户端连接</description>
          <long-description>endfile函数调用OS提供的sendfile系统调用，由操作系统直接读取文件并写入socket。sendfile只有2次内存拷贝，使用此函数可以降低发送大量文件时操作系统的CPU和内存占用。

$filename 要发送的文件路径，如果文件不存在会返回false
操作成功返回true，失败返回false
此函数与swoole_server-&gt;send都是向客户端发送数据，不同的是sendfile的数据来自于指定的文件。</long-description>
          <tag name="param" line="641" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="641" description="&lt;p&gt;文件绝对路径&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="641" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="662" package="Default">
        <name>bind</name>
        <full_name>\Swoole\Server::bind()</full_name>
        <docblock line="662">
          <description>将连接绑定一个用户定义的ID，可以设置dispatch_mode=5设置已此ID值进行hash固定分配。可以保证某一个UID的连接全部会分配到同一个Worker进程</description>
          <long-description>在默认的dispatch_mode=2设置下，server会按照socket fd来分配连接数据到不同的worker。
因为fd是不稳定的，一个客户端断开后重新连接，fd会发生改变。这样这个客户端的数据就会被分配到别的Worker。
使用bind之后就可以按照用户定义的ID进行分配。即使断线重连，相同uid的TCP连接数据会被分配相同的Worker进程。

* $fd 连接的文件描述符
* $uid 指定UID

同一个连接只能被bind一次，如果已经绑定了uid，再次调用bind会返回false
可以使用$serv-&gt;connection_info($fd) 查看连接所绑定uid的值</long-description>
          <tag name="param" line="662" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="param" line="662" description="" type="integer" variable="$uid">
            <type>integer</type>
          </tag>
          <tag name="return" line="662" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uid</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="671" package="Default">
        <name>getSocket</name>
        <full_name>\Swoole\Server::getSocket()</full_name>
        <docblock line="671">
          <description>根据监听的端口号获取ServerSocket，返回一个sockets资源</description>
          <long-description></long-description>
          <tag name="param" line="671" description="" type="" variable="$port"/>
          <tag name="return" line="671" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$port</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="681" package="Default">
        <name>exist</name>
        <full_name>\Swoole\Server::exist()</full_name>
        <docblock line="681">
          <description>判断fd对应的连接是否存在</description>
          <long-description></long-description>
          <tag name="param" line="681" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="681" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="689" package="Default">
        <name>defer</name>
        <full_name>\Swoole\Server::defer()</full_name>
        <docblock line="689">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="689" description="" type="callable" variable="$callback">
            <type>callable</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callable</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="698" package="Default">
        <name>getClientInfo</name>
        <full_name>\Swoole\Server::getClientInfo()</full_name>
        <docblock line="698">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="698" description="" type="integer" variable="$fd">
            <type>integer</type>
          </tag>
          <tag name="return" line="698" description="| array" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fd</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\Swoole\Server</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="331" code="PPC:ERR-50015">Argument $callback is missing from the Docblock of swoole_mysql_query</error>
      <error line="653" code="PPC:ERR-50005">No summary for class \swoole_http_client</error>
      <error line="658" code="PPC:ERR-50005">No summary for class \swoole_http_request</error>
      <error line="663" code="PPC:ERR-50005">No summary for class \swoole_http_response</error>
      <error line="668" code="PPC:ERR-50005">No summary for class \swoole_http_server</error>
      <error line="673" code="PPC:ERR-50005">No summary for class \swoole_atomic</error>
      <error line="678" code="PPC:ERR-50005">No summary for class \swoole_buffer</error>
      <error line="683" code="PPC:ERR-50005">No summary for class \swoole_client</error>
      <error line="688" code="PPC:ERR-50005">No summary for class \swoole_server</error>
      <error line="693" code="PPC:ERR-50005">No summary for class \swoole_lock</error>
      <error line="698" code="PPC:ERR-50005">No summary for class \swoole_redis</error>
      <error line="703" code="PPC:ERR-50005">No summary for class \swoole_process</error>
      <error line="708" code="PPC:ERR-50005">No summary for class \swoole_table</error>
      <error line="713" code="PPC:ERR-50005">No summary for class \swoole_websocket_server</error>
    </parse_markers>
    <source></source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="global" full_name="global"/>
  <namespace name="Swoole" full_name="Swoole">
    <namespace name="Http" full_name="Swoole\Http"/>
    <namespace name="WebSocket" full_name="Swoole\WebSocket"/>
  </namespace>
  <deprecated count="0"/>
</project>
